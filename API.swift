//  This file was automatically generated and should not be edited.

import AWSAppSync

public struct CreateTenantInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var address1: String {
    get {
      return graphQLMap["address1"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address1")
    }
  }

  public var address2: String? {
    get {
      return graphQLMap["address2"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address2")
    }
  }

  public var city: String {
    get {
      return graphQLMap["city"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var postcode: String {
    get {
      return graphQLMap["postcode"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postcode")
    }
  }

  public var bucket: String? {
    get {
      return graphQLMap["bucket"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bucket")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelTenantConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(name: ModelStringInput? = nil, address1: ModelStringInput? = nil, address2: ModelStringInput? = nil, city: ModelStringInput? = nil, postcode: ModelStringInput? = nil, bucket: ModelStringInput? = nil, and: [ModelTenantConditionInput?]? = nil, or: [ModelTenantConditionInput?]? = nil, not: ModelTenantConditionInput? = nil) {
    graphQLMap = ["name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "and": and, "or": or, "not": not]
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var address1: ModelStringInput? {
    get {
      return graphQLMap["address1"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address1")
    }
  }

  public var address2: ModelStringInput? {
    get {
      return graphQLMap["address2"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address2")
    }
  }

  public var city: ModelStringInput? {
    get {
      return graphQLMap["city"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var postcode: ModelStringInput? {
    get {
      return graphQLMap["postcode"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postcode")
    }
  }

  public var bucket: ModelStringInput? {
    get {
      return graphQLMap["bucket"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bucket")
    }
  }

  public var and: [ModelTenantConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelTenantConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelTenantConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelTenantConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelTenantConditionInput? {
    get {
      return graphQLMap["not"] as! ModelTenantConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelStringInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: String? = nil, eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, contains: String? = nil, notContains: String? = nil, between: [String?]? = nil, beginsWith: String? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: String? {
    get {
      return graphQLMap["ne"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: String? {
    get {
      return graphQLMap["eq"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: String? {
    get {
      return graphQLMap["le"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: String? {
    get {
      return graphQLMap["lt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: String? {
    get {
      return graphQLMap["ge"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: String? {
    get {
      return graphQLMap["gt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: String? {
    get {
      return graphQLMap["contains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: String? {
    get {
      return graphQLMap["notContains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [String?]? {
    get {
      return graphQLMap["between"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: String? {
    get {
      return graphQLMap["beginsWith"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public enum ModelAttributeTypes: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case binary
  case binarySet
  case bool
  case list
  case map
  case number
  case numberSet
  case string
  case stringSet
  case null
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "binary": self = .binary
      case "binarySet": self = .binarySet
      case "bool": self = .bool
      case "list": self = .list
      case "map": self = .map
      case "number": self = .number
      case "numberSet": self = .numberSet
      case "string": self = .string
      case "stringSet": self = .stringSet
      case "_null": self = .null
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .binary: return "binary"
      case .binarySet: return "binarySet"
      case .bool: return "bool"
      case .list: return "list"
      case .map: return "map"
      case .number: return "number"
      case .numberSet: return "numberSet"
      case .string: return "string"
      case .stringSet: return "stringSet"
      case .null: return "_null"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ModelAttributeTypes, rhs: ModelAttributeTypes) -> Bool {
    switch (lhs, rhs) {
      case (.binary, .binary): return true
      case (.binarySet, .binarySet): return true
      case (.bool, .bool): return true
      case (.list, .list): return true
      case (.map, .map): return true
      case (.number, .number): return true
      case (.numberSet, .numberSet): return true
      case (.string, .string): return true
      case (.stringSet, .stringSet): return true
      case (.null, .null): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ModelSizeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }
}

public enum Role: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case tester
  case admin
  case viewer
  case editor
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "TESTER": self = .tester
      case "ADMIN": self = .admin
      case "VIEWER": self = .viewer
      case "EDITOR": self = .editor
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .tester: return "TESTER"
      case .admin: return "ADMIN"
      case .viewer: return "VIEWER"
      case .editor: return "EDITOR"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: Role, rhs: Role) -> Bool {
    switch (lhs, rhs) {
      case (.tester, .tester): return true
      case (.admin, .admin): return true
      case (.viewer, .viewer): return true
      case (.editor, .editor): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct UpdateTenantInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String? = nil, address1: String? = nil, address2: String? = nil, city: String? = nil, postcode: String? = nil, bucket: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var address1: String? {
    get {
      return graphQLMap["address1"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address1")
    }
  }

  public var address2: String? {
    get {
      return graphQLMap["address2"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address2")
    }
  }

  public var city: String? {
    get {
      return graphQLMap["city"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var postcode: String? {
    get {
      return graphQLMap["postcode"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postcode")
    }
  }

  public var bucket: String? {
    get {
      return graphQLMap["bucket"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bucket")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteTenantInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var tenantId: GraphQLID {
    get {
      return graphQLMap["tenantID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tenantID")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var email: String {
    get {
      return graphQLMap["email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var solo: Bool? {
    get {
      return graphQLMap["solo"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "solo")
    }
  }

  public var admin: Bool? {
    get {
      return graphQLMap["admin"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "admin")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelUserConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(tenantId: ModelIDInput? = nil, name: ModelStringInput? = nil, email: ModelStringInput? = nil, solo: ModelBooleanInput? = nil, admin: ModelBooleanInput? = nil, and: [ModelUserConditionInput?]? = nil, or: [ModelUserConditionInput?]? = nil, not: ModelUserConditionInput? = nil) {
    graphQLMap = ["tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "and": and, "or": or, "not": not]
  }

  public var tenantId: ModelIDInput? {
    get {
      return graphQLMap["tenantID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tenantID")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var email: ModelStringInput? {
    get {
      return graphQLMap["email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var solo: ModelBooleanInput? {
    get {
      return graphQLMap["solo"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "solo")
    }
  }

  public var admin: ModelBooleanInput? {
    get {
      return graphQLMap["admin"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "admin")
    }
  }

  public var and: [ModelUserConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserConditionInput? {
    get {
      return graphQLMap["not"] as! ModelUserConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIDInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: GraphQLID? = nil, eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, contains: GraphQLID? = nil, notContains: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: GraphQLID? {
    get {
      return graphQLMap["ne"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: GraphQLID? {
    get {
      return graphQLMap["eq"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: GraphQLID? {
    get {
      return graphQLMap["le"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: GraphQLID? {
    get {
      return graphQLMap["lt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: GraphQLID? {
    get {
      return graphQLMap["ge"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: GraphQLID? {
    get {
      return graphQLMap["gt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: GraphQLID? {
    get {
      return graphQLMap["contains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: GraphQLID? {
    get {
      return graphQLMap["notContains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [GraphQLID?]? {
    get {
      return graphQLMap["between"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: GraphQLID? {
    get {
      return graphQLMap["beginsWith"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public struct ModelBooleanInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Bool? = nil, eq: Bool? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Bool? {
    get {
      return graphQLMap["ne"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Bool? {
    get {
      return graphQLMap["eq"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct UpdateUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, tenantId: GraphQLID? = nil, name: String? = nil, email: String? = nil, solo: Bool? = nil, admin: Bool? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var tenantId: GraphQLID? {
    get {
      return graphQLMap["tenantID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tenantID")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var email: String? {
    get {
      return graphQLMap["email"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var solo: Bool? {
    get {
      return graphQLMap["solo"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "solo")
    }
  }

  public var admin: Bool? {
    get {
      return graphQLMap["admin"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "admin")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateUserVersionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: GraphQLID {
    get {
      return graphQLMap["userID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var versionId: GraphQLID {
    get {
      return graphQLMap["versionID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "versionID")
    }
  }

  public var role: Role? {
    get {
      return graphQLMap["role"] as! Role?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelUserVersionConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(userId: ModelIDInput? = nil, versionId: ModelIDInput? = nil, role: ModelRoleInput? = nil, and: [ModelUserVersionConditionInput?]? = nil, or: [ModelUserVersionConditionInput?]? = nil, not: ModelUserVersionConditionInput? = nil) {
    graphQLMap = ["userID": userId, "versionID": versionId, "role": role, "and": and, "or": or, "not": not]
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var versionId: ModelIDInput? {
    get {
      return graphQLMap["versionID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "versionID")
    }
  }

  public var role: ModelRoleInput? {
    get {
      return graphQLMap["role"] as! ModelRoleInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  public var and: [ModelUserVersionConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserVersionConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserVersionConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserVersionConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserVersionConditionInput? {
    get {
      return graphQLMap["not"] as! ModelUserVersionConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelRoleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(eq: Role? = nil, ne: Role? = nil) {
    graphQLMap = ["eq": eq, "ne": ne]
  }

  public var eq: Role? {
    get {
      return graphQLMap["eq"] as! Role?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var ne: Role? {
    get {
      return graphQLMap["ne"] as! Role?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }
}

public struct UpdateUserVersionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, userId: GraphQLID? = nil, versionId: GraphQLID? = nil, role: Role? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var versionId: GraphQLID? {
    get {
      return graphQLMap["versionID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "versionID")
    }
  }

  public var role: Role? {
    get {
      return graphQLMap["role"] as! Role?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteUserVersionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateSolutionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int? = nil) {
    graphQLMap = ["id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var tenantId: GraphQLID {
    get {
      return graphQLMap["tenantID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tenantID")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var link: String? {
    get {
      return graphQLMap["link"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var ownerUser: String {
    get {
      return graphQLMap["ownerUser"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerUser")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelSolutionConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(tenantId: ModelIDInput? = nil, name: ModelStringInput? = nil, link: ModelStringInput? = nil, ownerUser: ModelStringInput? = nil, and: [ModelSolutionConditionInput?]? = nil, or: [ModelSolutionConditionInput?]? = nil, not: ModelSolutionConditionInput? = nil) {
    graphQLMap = ["tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "and": and, "or": or, "not": not]
  }

  public var tenantId: ModelIDInput? {
    get {
      return graphQLMap["tenantID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tenantID")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var link: ModelStringInput? {
    get {
      return graphQLMap["link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var ownerUser: ModelStringInput? {
    get {
      return graphQLMap["ownerUser"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerUser")
    }
  }

  public var and: [ModelSolutionConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSolutionConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSolutionConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSolutionConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelSolutionConditionInput? {
    get {
      return graphQLMap["not"] as! ModelSolutionConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateSolutionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, tenantId: GraphQLID? = nil, name: String? = nil, link: String? = nil, ownerUser: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var tenantId: GraphQLID? {
    get {
      return graphQLMap["tenantID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tenantID")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var link: String? {
    get {
      return graphQLMap["link"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var ownerUser: String? {
    get {
      return graphQLMap["ownerUser"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerUser")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteSolutionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateVersionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, archived: Bool? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "archived": archived, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var solutionId: GraphQLID {
    get {
      return graphQLMap["solutionID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "solutionID")
    }
  }

  public var fileId: GraphQLID {
    get {
      return graphQLMap["fileID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "fileID")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var ownerUser: String {
    get {
      return graphQLMap["ownerUser"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerUser")
    }
  }

  public var size: Int? {
    get {
      return graphQLMap["size"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }

  public var preview: String? {
    get {
      return graphQLMap["preview"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "preview")
    }
  }

  public var archived: Bool? {
    get {
      return graphQLMap["archived"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "archived")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelVersionConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(solutionId: ModelIDInput? = nil, fileId: ModelIDInput? = nil, name: ModelStringInput? = nil, ownerUser: ModelStringInput? = nil, size: ModelIntInput? = nil, preview: ModelStringInput? = nil, version: ModelIntInput? = nil, archived: ModelBooleanInput? = nil, and: [ModelVersionConditionInput?]? = nil, or: [ModelVersionConditionInput?]? = nil, not: ModelVersionConditionInput? = nil) {
    graphQLMap = ["solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "and": and, "or": or, "not": not]
  }

  public var solutionId: ModelIDInput? {
    get {
      return graphQLMap["solutionID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "solutionID")
    }
  }

  public var fileId: ModelIDInput? {
    get {
      return graphQLMap["fileID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "fileID")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var ownerUser: ModelStringInput? {
    get {
      return graphQLMap["ownerUser"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerUser")
    }
  }

  public var size: ModelIntInput? {
    get {
      return graphQLMap["size"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }

  public var preview: ModelStringInput? {
    get {
      return graphQLMap["preview"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "preview")
    }
  }

  public var version: ModelIntInput? {
    get {
      return graphQLMap["version"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "version")
    }
  }

  public var archived: ModelBooleanInput? {
    get {
      return graphQLMap["archived"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "archived")
    }
  }

  public var and: [ModelVersionConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelVersionConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelVersionConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelVersionConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelVersionConditionInput? {
    get {
      return graphQLMap["not"] as! ModelVersionConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIntInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct UpdateVersionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, solutionId: GraphQLID? = nil, fileId: GraphQLID? = nil, name: String? = nil, ownerUser: String? = nil, size: Int? = nil, preview: String? = nil, version: Int? = nil, archived: Bool? = nil, version: Int? = nil, expectedVersion: Int) {
    graphQLMap = ["id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "expectedVersion": expectedVersion]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var solutionId: GraphQLID? {
    get {
      return graphQLMap["solutionID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "solutionID")
    }
  }

  public var fileId: GraphQLID? {
    get {
      return graphQLMap["fileID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "fileID")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var ownerUser: String? {
    get {
      return graphQLMap["ownerUser"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerUser")
    }
  }

  public var size: Int? {
    get {
      return graphQLMap["size"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }

  public var preview: String? {
    get {
      return graphQLMap["preview"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "preview")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "version")
    }
  }

  public var archived: Bool? {
    get {
      return graphQLMap["archived"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "archived")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var expectedVersion: Int {
    get {
      return graphQLMap["expectedVersion"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "expectedVersion")
    }
  }
}

public struct DeleteVersionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, version: Int? = nil, expectedVersion: Int) {
    graphQLMap = ["id": id, "_version": version, "expectedVersion": expectedVersion]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var expectedVersion: Int {
    get {
      return graphQLMap["expectedVersion"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "expectedVersion")
    }
  }
}

public struct CreateS3ObjectFileInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int? = nil, localUri: String, mimeType: String) {
    graphQLMap = ["id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "localUri": localUri, "mimeType": mimeType]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var bucket: String? {
    get {
      return graphQLMap["bucket"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bucket")
    }
  }

  public var region: String? {
    get {
      return graphQLMap["region"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "region")
    }
  }

  public var key: String? {
    get {
      return graphQLMap["key"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "key")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var localUri: String {
    get {
      return graphQLMap["localUri"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "localUri")
    }
  }

  public var mimeType: String {
    get {
      return graphQLMap["mimeType"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "mimeType")
    }
  }
}

public struct ModelS3ObjectFileConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(bucket: ModelStringInput? = nil, region: ModelStringInput? = nil, key: ModelStringInput? = nil, and: [ModelS3ObjectFileConditionInput?]? = nil, or: [ModelS3ObjectFileConditionInput?]? = nil, not: ModelS3ObjectFileConditionInput? = nil) {
    graphQLMap = ["bucket": bucket, "region": region, "key": key, "and": and, "or": or, "not": not]
  }

  public var bucket: ModelStringInput? {
    get {
      return graphQLMap["bucket"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bucket")
    }
  }

  public var region: ModelStringInput? {
    get {
      return graphQLMap["region"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "region")
    }
  }

  public var key: ModelStringInput? {
    get {
      return graphQLMap["key"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "key")
    }
  }

  public var and: [ModelS3ObjectFileConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelS3ObjectFileConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelS3ObjectFileConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelS3ObjectFileConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelS3ObjectFileConditionInput? {
    get {
      return graphQLMap["not"] as! ModelS3ObjectFileConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateS3ObjectFileInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int? = nil, localUri: String, mimeType: String) {
    graphQLMap = ["id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "localUri": localUri, "mimeType": mimeType]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var bucket: String? {
    get {
      return graphQLMap["bucket"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bucket")
    }
  }

  public var region: String? {
    get {
      return graphQLMap["region"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "region")
    }
  }

  public var key: String? {
    get {
      return graphQLMap["key"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "key")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var localUri: String {
    get {
      return graphQLMap["localUri"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "localUri")
    }
  }

  public var mimeType: String {
    get {
      return graphQLMap["mimeType"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "mimeType")
    }
  }
}

public struct DeleteS3ObjectFileInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelTenantFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, address1: ModelStringInput? = nil, address2: ModelStringInput? = nil, city: ModelStringInput? = nil, postcode: ModelStringInput? = nil, bucket: ModelStringInput? = nil, and: [ModelTenantFilterInput?]? = nil, or: [ModelTenantFilterInput?]? = nil, not: ModelTenantFilterInput? = nil) {
    graphQLMap = ["id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var address1: ModelStringInput? {
    get {
      return graphQLMap["address1"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address1")
    }
  }

  public var address2: ModelStringInput? {
    get {
      return graphQLMap["address2"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address2")
    }
  }

  public var city: ModelStringInput? {
    get {
      return graphQLMap["city"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var postcode: ModelStringInput? {
    get {
      return graphQLMap["postcode"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postcode")
    }
  }

  public var bucket: ModelStringInput? {
    get {
      return graphQLMap["bucket"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bucket")
    }
  }

  public var and: [ModelTenantFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelTenantFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelTenantFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelTenantFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelTenantFilterInput? {
    get {
      return graphQLMap["not"] as! ModelTenantFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, tenantId: ModelIDInput? = nil, name: ModelStringInput? = nil, email: ModelStringInput? = nil, solo: ModelBooleanInput? = nil, admin: ModelBooleanInput? = nil, and: [ModelUserFilterInput?]? = nil, or: [ModelUserFilterInput?]? = nil, not: ModelUserFilterInput? = nil) {
    graphQLMap = ["id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var tenantId: ModelIDInput? {
    get {
      return graphQLMap["tenantID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tenantID")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var email: ModelStringInput? {
    get {
      return graphQLMap["email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var solo: ModelBooleanInput? {
    get {
      return graphQLMap["solo"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "solo")
    }
  }

  public var admin: ModelBooleanInput? {
    get {
      return graphQLMap["admin"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "admin")
    }
  }

  public var and: [ModelUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserFilterInput? {
    get {
      return graphQLMap["not"] as! ModelUserFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelUserVersionFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, userId: ModelIDInput? = nil, versionId: ModelIDInput? = nil, role: ModelRoleInput? = nil, and: [ModelUserVersionFilterInput?]? = nil, or: [ModelUserVersionFilterInput?]? = nil, not: ModelUserVersionFilterInput? = nil) {
    graphQLMap = ["id": id, "userID": userId, "versionID": versionId, "role": role, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var versionId: ModelIDInput? {
    get {
      return graphQLMap["versionID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "versionID")
    }
  }

  public var role: ModelRoleInput? {
    get {
      return graphQLMap["role"] as! ModelRoleInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  public var and: [ModelUserVersionFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserVersionFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserVersionFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserVersionFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserVersionFilterInput? {
    get {
      return graphQLMap["not"] as! ModelUserVersionFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelSolutionFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, tenantId: ModelIDInput? = nil, name: ModelStringInput? = nil, link: ModelStringInput? = nil, ownerUser: ModelStringInput? = nil, and: [ModelSolutionFilterInput?]? = nil, or: [ModelSolutionFilterInput?]? = nil, not: ModelSolutionFilterInput? = nil) {
    graphQLMap = ["id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var tenantId: ModelIDInput? {
    get {
      return graphQLMap["tenantID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tenantID")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var link: ModelStringInput? {
    get {
      return graphQLMap["link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var ownerUser: ModelStringInput? {
    get {
      return graphQLMap["ownerUser"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerUser")
    }
  }

  public var and: [ModelSolutionFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSolutionFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSolutionFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSolutionFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelSolutionFilterInput? {
    get {
      return graphQLMap["not"] as! ModelSolutionFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelVersionFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, solutionId: ModelIDInput? = nil, fileId: ModelIDInput? = nil, name: ModelStringInput? = nil, ownerUser: ModelStringInput? = nil, size: ModelIntInput? = nil, preview: ModelStringInput? = nil, version: ModelIntInput? = nil, archived: ModelBooleanInput? = nil, and: [ModelVersionFilterInput?]? = nil, or: [ModelVersionFilterInput?]? = nil, not: ModelVersionFilterInput? = nil) {
    graphQLMap = ["id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var solutionId: ModelIDInput? {
    get {
      return graphQLMap["solutionID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "solutionID")
    }
  }

  public var fileId: ModelIDInput? {
    get {
      return graphQLMap["fileID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "fileID")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var ownerUser: ModelStringInput? {
    get {
      return graphQLMap["ownerUser"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerUser")
    }
  }

  public var size: ModelIntInput? {
    get {
      return graphQLMap["size"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }

  public var preview: ModelStringInput? {
    get {
      return graphQLMap["preview"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "preview")
    }
  }

  public var version: ModelIntInput? {
    get {
      return graphQLMap["version"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "version")
    }
  }

  public var archived: ModelBooleanInput? {
    get {
      return graphQLMap["archived"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "archived")
    }
  }

  public var and: [ModelVersionFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelVersionFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelVersionFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelVersionFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelVersionFilterInput? {
    get {
      return graphQLMap["not"] as! ModelVersionFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelS3ObjectFileFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, bucket: ModelStringInput? = nil, region: ModelStringInput? = nil, key: ModelStringInput? = nil, and: [ModelS3ObjectFileFilterInput?]? = nil, or: [ModelS3ObjectFileFilterInput?]? = nil, not: ModelS3ObjectFileFilterInput? = nil) {
    graphQLMap = ["id": id, "bucket": bucket, "region": region, "key": key, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var bucket: ModelStringInput? {
    get {
      return graphQLMap["bucket"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bucket")
    }
  }

  public var region: ModelStringInput? {
    get {
      return graphQLMap["region"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "region")
    }
  }

  public var key: ModelStringInput? {
    get {
      return graphQLMap["key"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "key")
    }
  }

  public var and: [ModelS3ObjectFileFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelS3ObjectFileFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelS3ObjectFileFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelS3ObjectFileFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelS3ObjectFileFilterInput? {
    get {
      return graphQLMap["not"] as! ModelS3ObjectFileFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public final class CreateTenantMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateTenant($input: CreateTenantInput!, $condition: ModelTenantConditionInput) {\n  createTenant(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    address1\n    address2\n    city\n    postcode\n    bucket\n    solutions {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    users {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        email\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        solo\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        admin\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: CreateTenantInput
  public var condition: ModelTenantConditionInput?

  public init(input: CreateTenantInput, condition: ModelTenantConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createTenant", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createTenant: CreateTenant? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createTenant": createTenant.flatMap { $0.snapshot }])
    }

    public var createTenant: CreateTenant? {
      get {
        return (snapshot["createTenant"] as? Snapshot).flatMap { CreateTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createTenant")
      }
    }

    public struct CreateTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["Tenant"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("address1", type: .nonNull(.scalar(String.self))),
        GraphQLField("address2", type: .scalar(String.self)),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("solutions", type: .object(Solution.selections)),
        GraphQLField("users", type: .object(User.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var address1: String {
        get {
          return snapshot["address1"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address1")
        }
      }

      public var address2: String? {
        get {
          return snapshot["address2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address2")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var postcode: String {
        get {
          return snapshot["postcode"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "postcode")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var solutions: Solution? {
        get {
          return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
        }
      }

      public var users: User? {
        get {
          return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "users")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelSolutionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .object(Tenant.selections)),
            GraphQLField("solo", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
            GraphQLField("admin", type: .scalar(Bool.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var tenant: Tenant? {
            get {
              return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
            }
          }

          public var solo: Bool? {
            get {
              return snapshot["solo"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "solo")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public var admin: Bool? {
            get {
              return snapshot["admin"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "admin")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateTenantMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateTenant($input: UpdateTenantInput!, $condition: ModelTenantConditionInput) {\n  updateTenant(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    address1\n    address2\n    city\n    postcode\n    bucket\n    solutions {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    users {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        email\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        solo\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        admin\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: UpdateTenantInput
  public var condition: ModelTenantConditionInput?

  public init(input: UpdateTenantInput, condition: ModelTenantConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateTenant", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateTenant: UpdateTenant? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateTenant": updateTenant.flatMap { $0.snapshot }])
    }

    public var updateTenant: UpdateTenant? {
      get {
        return (snapshot["updateTenant"] as? Snapshot).flatMap { UpdateTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateTenant")
      }
    }

    public struct UpdateTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["Tenant"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("address1", type: .nonNull(.scalar(String.self))),
        GraphQLField("address2", type: .scalar(String.self)),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("solutions", type: .object(Solution.selections)),
        GraphQLField("users", type: .object(User.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var address1: String {
        get {
          return snapshot["address1"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address1")
        }
      }

      public var address2: String? {
        get {
          return snapshot["address2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address2")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var postcode: String {
        get {
          return snapshot["postcode"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "postcode")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var solutions: Solution? {
        get {
          return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
        }
      }

      public var users: User? {
        get {
          return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "users")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelSolutionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .object(Tenant.selections)),
            GraphQLField("solo", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
            GraphQLField("admin", type: .scalar(Bool.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var tenant: Tenant? {
            get {
              return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
            }
          }

          public var solo: Bool? {
            get {
              return snapshot["solo"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "solo")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public var admin: Bool? {
            get {
              return snapshot["admin"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "admin")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteTenantMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteTenant($input: DeleteTenantInput!, $condition: ModelTenantConditionInput) {\n  deleteTenant(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    address1\n    address2\n    city\n    postcode\n    bucket\n    solutions {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    users {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        email\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        solo\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        admin\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: DeleteTenantInput
  public var condition: ModelTenantConditionInput?

  public init(input: DeleteTenantInput, condition: ModelTenantConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteTenant", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteTenant: DeleteTenant? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteTenant": deleteTenant.flatMap { $0.snapshot }])
    }

    public var deleteTenant: DeleteTenant? {
      get {
        return (snapshot["deleteTenant"] as? Snapshot).flatMap { DeleteTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteTenant")
      }
    }

    public struct DeleteTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["Tenant"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("address1", type: .nonNull(.scalar(String.self))),
        GraphQLField("address2", type: .scalar(String.self)),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("solutions", type: .object(Solution.selections)),
        GraphQLField("users", type: .object(User.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var address1: String {
        get {
          return snapshot["address1"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address1")
        }
      }

      public var address2: String? {
        get {
          return snapshot["address2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address2")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var postcode: String {
        get {
          return snapshot["postcode"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "postcode")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var solutions: Solution? {
        get {
          return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
        }
      }

      public var users: User? {
        get {
          return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "users")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelSolutionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .object(Tenant.selections)),
            GraphQLField("solo", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
            GraphQLField("admin", type: .scalar(Bool.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var tenant: Tenant? {
            get {
              return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
            }
          }

          public var solo: Bool? {
            get {
              return snapshot["solo"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "solo")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public var admin: Bool? {
            get {
              return snapshot["admin"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "admin")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateUser($input: CreateUserInput!, $condition: ModelUserConditionInput) {\n  createUser(input: $input, condition: $condition) {\n    __typename\n    id\n    tenantID\n    name\n    email\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    solo\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    admin\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: CreateUserInput
  public var condition: ModelUserConditionInput?

  public init(input: CreateUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createUser: CreateUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createUser": createUser.flatMap { $0.snapshot }])
    }

    public var createUser: CreateUser? {
      get {
        return (snapshot["createUser"] as? Snapshot).flatMap { CreateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createUser")
      }
    }

    public struct CreateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .object(Tenant.selections)),
        GraphQLField("solo", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
        GraphQLField("admin", type: .scalar(Bool.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var tenant: Tenant? {
        get {
          return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
        }
      }

      public var solo: Bool? {
        get {
          return snapshot["solo"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "solo")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public var admin: Bool? {
        get {
          return snapshot["admin"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "admin")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateUser($input: UpdateUserInput!, $condition: ModelUserConditionInput) {\n  updateUser(input: $input, condition: $condition) {\n    __typename\n    id\n    tenantID\n    name\n    email\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    solo\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    admin\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: UpdateUserInput
  public var condition: ModelUserConditionInput?

  public init(input: UpdateUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateUser: UpdateUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateUser": updateUser.flatMap { $0.snapshot }])
    }

    public var updateUser: UpdateUser? {
      get {
        return (snapshot["updateUser"] as? Snapshot).flatMap { UpdateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateUser")
      }
    }

    public struct UpdateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .object(Tenant.selections)),
        GraphQLField("solo", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
        GraphQLField("admin", type: .scalar(Bool.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var tenant: Tenant? {
        get {
          return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
        }
      }

      public var solo: Bool? {
        get {
          return snapshot["solo"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "solo")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public var admin: Bool? {
        get {
          return snapshot["admin"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "admin")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteUser($input: DeleteUserInput!, $condition: ModelUserConditionInput) {\n  deleteUser(input: $input, condition: $condition) {\n    __typename\n    id\n    tenantID\n    name\n    email\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    solo\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    admin\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: DeleteUserInput
  public var condition: ModelUserConditionInput?

  public init(input: DeleteUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteUser: DeleteUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteUser": deleteUser.flatMap { $0.snapshot }])
    }

    public var deleteUser: DeleteUser? {
      get {
        return (snapshot["deleteUser"] as? Snapshot).flatMap { DeleteUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteUser")
      }
    }

    public struct DeleteUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .object(Tenant.selections)),
        GraphQLField("solo", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
        GraphQLField("admin", type: .scalar(Bool.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var tenant: Tenant? {
        get {
          return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
        }
      }

      public var solo: Bool? {
        get {
          return snapshot["solo"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "solo")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public var admin: Bool? {
        get {
          return snapshot["admin"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "admin")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateUserVersionMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateUserVersion($input: CreateUserVersionInput!, $condition: ModelUserVersionConditionInput) {\n  createUserVersion(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    versionID\n    user {\n      __typename\n      id\n      tenantID\n      name\n      email\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      solo\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      admin\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    role\n    versionRecord {\n      __typename\n      id\n      solutionID\n      fileID\n      name\n      ownerUser\n      file {\n        __typename\n        id\n        bucket\n        region\n        key\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      size\n      preview\n      version\n      archived\n      solution {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      members {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: CreateUserVersionInput
  public var condition: ModelUserVersionConditionInput?

  public init(input: CreateUserVersionInput, condition: ModelUserVersionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createUserVersion", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateUserVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createUserVersion: CreateUserVersion? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createUserVersion": createUserVersion.flatMap { $0.snapshot }])
    }

    public var createUserVersion: CreateUserVersion? {
      get {
        return (snapshot["createUserVersion"] as? Snapshot).flatMap { CreateUserVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createUserVersion")
      }
    }

    public struct CreateUserVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["UserVersion"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("role", type: .scalar(Role.self)),
        GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var versionId: GraphQLID {
        get {
          return snapshot["versionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "versionID")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var role: Role? {
        get {
          return snapshot["role"] as? Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var versionRecord: VersionRecord? {
        get {
          return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .object(Tenant.selections)),
          GraphQLField("solo", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
          GraphQLField("admin", type: .scalar(Bool.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var tenant: Tenant? {
          get {
            return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
          }
        }

        public var solo: Bool? {
          get {
            return snapshot["solo"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "solo")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public var admin: Bool? {
          get {
            return snapshot["admin"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "admin")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct VersionRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["Version"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("file", type: .object(File.selections)),
          GraphQLField("size", type: .scalar(Int.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("archived", type: .scalar(Bool.self)),
          GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
          GraphQLField("members", type: .object(Member.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var solutionId: GraphQLID {
          get {
            return snapshot["solutionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "solutionID")
          }
        }

        public var fileId: GraphQLID {
          get {
            return snapshot["fileID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "fileID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var file: File? {
          get {
            return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "file")
          }
        }

        public var size: Int? {
          get {
            return snapshot["size"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "size")
          }
        }

        public var preview: String? {
          get {
            return snapshot["preview"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "preview")
          }
        }

        public var version: Int {
          get {
            return snapshot["version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "version")
          }
        }

        public var archived: Bool? {
          get {
            return snapshot["archived"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "archived")
          }
        }

        public var solution: Solution {
          get {
            return Solution(snapshot: snapshot["solution"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "solution")
          }
        }

        public var members: Member? {
          get {
            return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "members")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct File: GraphQLSelectionSet {
          public static let possibleTypes = ["S3ObjectFile"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var region: String? {
            get {
              return snapshot["region"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "region")
            }
          }

          public var key: String? {
            get {
              return snapshot["key"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "key")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Member: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateUserVersionMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateUserVersion($input: UpdateUserVersionInput!, $condition: ModelUserVersionConditionInput) {\n  updateUserVersion(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    versionID\n    user {\n      __typename\n      id\n      tenantID\n      name\n      email\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      solo\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      admin\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    role\n    versionRecord {\n      __typename\n      id\n      solutionID\n      fileID\n      name\n      ownerUser\n      file {\n        __typename\n        id\n        bucket\n        region\n        key\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      size\n      preview\n      version\n      archived\n      solution {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      members {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: UpdateUserVersionInput
  public var condition: ModelUserVersionConditionInput?

  public init(input: UpdateUserVersionInput, condition: ModelUserVersionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateUserVersion", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateUserVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateUserVersion: UpdateUserVersion? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateUserVersion": updateUserVersion.flatMap { $0.snapshot }])
    }

    public var updateUserVersion: UpdateUserVersion? {
      get {
        return (snapshot["updateUserVersion"] as? Snapshot).flatMap { UpdateUserVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateUserVersion")
      }
    }

    public struct UpdateUserVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["UserVersion"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("role", type: .scalar(Role.self)),
        GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var versionId: GraphQLID {
        get {
          return snapshot["versionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "versionID")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var role: Role? {
        get {
          return snapshot["role"] as? Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var versionRecord: VersionRecord? {
        get {
          return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .object(Tenant.selections)),
          GraphQLField("solo", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
          GraphQLField("admin", type: .scalar(Bool.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var tenant: Tenant? {
          get {
            return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
          }
        }

        public var solo: Bool? {
          get {
            return snapshot["solo"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "solo")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public var admin: Bool? {
          get {
            return snapshot["admin"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "admin")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct VersionRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["Version"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("file", type: .object(File.selections)),
          GraphQLField("size", type: .scalar(Int.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("archived", type: .scalar(Bool.self)),
          GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
          GraphQLField("members", type: .object(Member.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var solutionId: GraphQLID {
          get {
            return snapshot["solutionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "solutionID")
          }
        }

        public var fileId: GraphQLID {
          get {
            return snapshot["fileID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "fileID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var file: File? {
          get {
            return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "file")
          }
        }

        public var size: Int? {
          get {
            return snapshot["size"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "size")
          }
        }

        public var preview: String? {
          get {
            return snapshot["preview"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "preview")
          }
        }

        public var version: Int {
          get {
            return snapshot["version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "version")
          }
        }

        public var archived: Bool? {
          get {
            return snapshot["archived"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "archived")
          }
        }

        public var solution: Solution {
          get {
            return Solution(snapshot: snapshot["solution"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "solution")
          }
        }

        public var members: Member? {
          get {
            return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "members")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct File: GraphQLSelectionSet {
          public static let possibleTypes = ["S3ObjectFile"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var region: String? {
            get {
              return snapshot["region"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "region")
            }
          }

          public var key: String? {
            get {
              return snapshot["key"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "key")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Member: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteUserVersionMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteUserVersion($input: DeleteUserVersionInput!, $condition: ModelUserVersionConditionInput) {\n  deleteUserVersion(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    versionID\n    user {\n      __typename\n      id\n      tenantID\n      name\n      email\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      solo\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      admin\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    role\n    versionRecord {\n      __typename\n      id\n      solutionID\n      fileID\n      name\n      ownerUser\n      file {\n        __typename\n        id\n        bucket\n        region\n        key\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      size\n      preview\n      version\n      archived\n      solution {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      members {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: DeleteUserVersionInput
  public var condition: ModelUserVersionConditionInput?

  public init(input: DeleteUserVersionInput, condition: ModelUserVersionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteUserVersion", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteUserVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteUserVersion: DeleteUserVersion? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteUserVersion": deleteUserVersion.flatMap { $0.snapshot }])
    }

    public var deleteUserVersion: DeleteUserVersion? {
      get {
        return (snapshot["deleteUserVersion"] as? Snapshot).flatMap { DeleteUserVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteUserVersion")
      }
    }

    public struct DeleteUserVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["UserVersion"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("role", type: .scalar(Role.self)),
        GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var versionId: GraphQLID {
        get {
          return snapshot["versionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "versionID")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var role: Role? {
        get {
          return snapshot["role"] as? Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var versionRecord: VersionRecord? {
        get {
          return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .object(Tenant.selections)),
          GraphQLField("solo", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
          GraphQLField("admin", type: .scalar(Bool.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var tenant: Tenant? {
          get {
            return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
          }
        }

        public var solo: Bool? {
          get {
            return snapshot["solo"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "solo")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public var admin: Bool? {
          get {
            return snapshot["admin"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "admin")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct VersionRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["Version"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("file", type: .object(File.selections)),
          GraphQLField("size", type: .scalar(Int.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("archived", type: .scalar(Bool.self)),
          GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
          GraphQLField("members", type: .object(Member.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var solutionId: GraphQLID {
          get {
            return snapshot["solutionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "solutionID")
          }
        }

        public var fileId: GraphQLID {
          get {
            return snapshot["fileID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "fileID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var file: File? {
          get {
            return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "file")
          }
        }

        public var size: Int? {
          get {
            return snapshot["size"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "size")
          }
        }

        public var preview: String? {
          get {
            return snapshot["preview"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "preview")
          }
        }

        public var version: Int {
          get {
            return snapshot["version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "version")
          }
        }

        public var archived: Bool? {
          get {
            return snapshot["archived"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "archived")
          }
        }

        public var solution: Solution {
          get {
            return Solution(snapshot: snapshot["solution"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "solution")
          }
        }

        public var members: Member? {
          get {
            return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "members")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct File: GraphQLSelectionSet {
          public static let possibleTypes = ["S3ObjectFile"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var region: String? {
            get {
              return snapshot["region"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "region")
            }
          }

          public var key: String? {
            get {
              return snapshot["key"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "key")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Member: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateSolutionMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateSolution($input: CreateSolutionInput!, $condition: ModelSolutionConditionInput) {\n  createSolution(input: $input, condition: $condition) {\n    __typename\n    id\n    tenantID\n    name\n    versions {\n      __typename\n      items {\n        __typename\n        id\n        solutionID\n        fileID\n        name\n        ownerUser\n        file {\n          __typename\n          id\n          bucket\n          region\n          key\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        size\n        preview\n        version\n        archived\n        solution {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        members {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    link\n    ownerUser\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: CreateSolutionInput
  public var condition: ModelSolutionConditionInput?

  public init(input: CreateSolutionInput, condition: ModelSolutionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createSolution", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createSolution: CreateSolution? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createSolution": createSolution.flatMap { $0.snapshot }])
    }

    public var createSolution: CreateSolution? {
      get {
        return (snapshot["createSolution"] as? Snapshot).flatMap { CreateSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createSolution")
      }
    }

    public struct CreateSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["Solution"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("versions", type: .object(Version.selections)),
        GraphQLField("link", type: .scalar(String.self)),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var versions: Version? {
        get {
          return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versions")
        }
      }

      public var link: String? {
        get {
          return snapshot["link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var tenant: Tenant {
        get {
          return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "tenant")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Version: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Version"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("file", type: .object(File.selections)),
            GraphQLField("size", type: .scalar(Int.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("archived", type: .scalar(Bool.self)),
            GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
            GraphQLField("members", type: .object(Member.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var solutionId: GraphQLID {
            get {
              return snapshot["solutionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "solutionID")
            }
          }

          public var fileId: GraphQLID {
            get {
              return snapshot["fileID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "fileID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var file: File? {
            get {
              return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "file")
            }
          }

          public var size: Int? {
            get {
              return snapshot["size"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "size")
            }
          }

          public var preview: String? {
            get {
              return snapshot["preview"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "preview")
            }
          }

          public var version: Int {
            get {
              return snapshot["version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "version")
            }
          }

          public var archived: Bool? {
            get {
              return snapshot["archived"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "archived")
            }
          }

          public var solution: Solution {
            get {
              return Solution(snapshot: snapshot["solution"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "solution")
            }
          }

          public var members: Member? {
            get {
              return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "members")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct File: GraphQLSelectionSet {
            public static let possibleTypes = ["S3ObjectFile"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var region: String? {
              get {
                return snapshot["region"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "region")
              }
            }

            public var key: String? {
              get {
                return snapshot["key"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "key")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Member: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateSolutionMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateSolution($input: UpdateSolutionInput!, $condition: ModelSolutionConditionInput) {\n  updateSolution(input: $input, condition: $condition) {\n    __typename\n    id\n    tenantID\n    name\n    versions {\n      __typename\n      items {\n        __typename\n        id\n        solutionID\n        fileID\n        name\n        ownerUser\n        file {\n          __typename\n          id\n          bucket\n          region\n          key\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        size\n        preview\n        version\n        archived\n        solution {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        members {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    link\n    ownerUser\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: UpdateSolutionInput
  public var condition: ModelSolutionConditionInput?

  public init(input: UpdateSolutionInput, condition: ModelSolutionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateSolution", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateSolution: UpdateSolution? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateSolution": updateSolution.flatMap { $0.snapshot }])
    }

    public var updateSolution: UpdateSolution? {
      get {
        return (snapshot["updateSolution"] as? Snapshot).flatMap { UpdateSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateSolution")
      }
    }

    public struct UpdateSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["Solution"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("versions", type: .object(Version.selections)),
        GraphQLField("link", type: .scalar(String.self)),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var versions: Version? {
        get {
          return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versions")
        }
      }

      public var link: String? {
        get {
          return snapshot["link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var tenant: Tenant {
        get {
          return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "tenant")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Version: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Version"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("file", type: .object(File.selections)),
            GraphQLField("size", type: .scalar(Int.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("archived", type: .scalar(Bool.self)),
            GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
            GraphQLField("members", type: .object(Member.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var solutionId: GraphQLID {
            get {
              return snapshot["solutionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "solutionID")
            }
          }

          public var fileId: GraphQLID {
            get {
              return snapshot["fileID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "fileID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var file: File? {
            get {
              return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "file")
            }
          }

          public var size: Int? {
            get {
              return snapshot["size"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "size")
            }
          }

          public var preview: String? {
            get {
              return snapshot["preview"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "preview")
            }
          }

          public var version: Int {
            get {
              return snapshot["version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "version")
            }
          }

          public var archived: Bool? {
            get {
              return snapshot["archived"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "archived")
            }
          }

          public var solution: Solution {
            get {
              return Solution(snapshot: snapshot["solution"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "solution")
            }
          }

          public var members: Member? {
            get {
              return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "members")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct File: GraphQLSelectionSet {
            public static let possibleTypes = ["S3ObjectFile"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var region: String? {
              get {
                return snapshot["region"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "region")
              }
            }

            public var key: String? {
              get {
                return snapshot["key"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "key")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Member: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteSolutionMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteSolution($input: DeleteSolutionInput!, $condition: ModelSolutionConditionInput) {\n  deleteSolution(input: $input, condition: $condition) {\n    __typename\n    id\n    tenantID\n    name\n    versions {\n      __typename\n      items {\n        __typename\n        id\n        solutionID\n        fileID\n        name\n        ownerUser\n        file {\n          __typename\n          id\n          bucket\n          region\n          key\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        size\n        preview\n        version\n        archived\n        solution {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        members {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    link\n    ownerUser\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: DeleteSolutionInput
  public var condition: ModelSolutionConditionInput?

  public init(input: DeleteSolutionInput, condition: ModelSolutionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteSolution", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteSolution: DeleteSolution? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteSolution": deleteSolution.flatMap { $0.snapshot }])
    }

    public var deleteSolution: DeleteSolution? {
      get {
        return (snapshot["deleteSolution"] as? Snapshot).flatMap { DeleteSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteSolution")
      }
    }

    public struct DeleteSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["Solution"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("versions", type: .object(Version.selections)),
        GraphQLField("link", type: .scalar(String.self)),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var versions: Version? {
        get {
          return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versions")
        }
      }

      public var link: String? {
        get {
          return snapshot["link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var tenant: Tenant {
        get {
          return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "tenant")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Version: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Version"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("file", type: .object(File.selections)),
            GraphQLField("size", type: .scalar(Int.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("archived", type: .scalar(Bool.self)),
            GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
            GraphQLField("members", type: .object(Member.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var solutionId: GraphQLID {
            get {
              return snapshot["solutionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "solutionID")
            }
          }

          public var fileId: GraphQLID {
            get {
              return snapshot["fileID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "fileID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var file: File? {
            get {
              return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "file")
            }
          }

          public var size: Int? {
            get {
              return snapshot["size"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "size")
            }
          }

          public var preview: String? {
            get {
              return snapshot["preview"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "preview")
            }
          }

          public var version: Int {
            get {
              return snapshot["version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "version")
            }
          }

          public var archived: Bool? {
            get {
              return snapshot["archived"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "archived")
            }
          }

          public var solution: Solution {
            get {
              return Solution(snapshot: snapshot["solution"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "solution")
            }
          }

          public var members: Member? {
            get {
              return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "members")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct File: GraphQLSelectionSet {
            public static let possibleTypes = ["S3ObjectFile"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var region: String? {
              get {
                return snapshot["region"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "region")
              }
            }

            public var key: String? {
              get {
                return snapshot["key"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "key")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Member: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateVersionMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateVersion($input: CreateVersionInput!, $condition: ModelVersionConditionInput) {\n  createVersion(input: $input, condition: $condition) {\n    __typename\n    id\n    solutionID\n    fileID\n    name\n    ownerUser\n    file {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    size\n    preview\n    version\n    archived\n    solution {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    members {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: CreateVersionInput
  public var condition: ModelVersionConditionInput?

  public init(input: CreateVersionInput, condition: ModelVersionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createVersion", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createVersion: CreateVersion? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createVersion": createVersion.flatMap { $0.snapshot }])
    }

    public var createVersion: CreateVersion? {
      get {
        return (snapshot["createVersion"] as? Snapshot).flatMap { CreateVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createVersion")
      }
    }

    public struct CreateVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["Version"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("file", type: .object(File.selections)),
        GraphQLField("size", type: .scalar(Int.self)),
        GraphQLField("preview", type: .scalar(String.self)),
        GraphQLField("version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("archived", type: .scalar(Bool.self)),
        GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
        GraphQLField("members", type: .object(Member.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var solutionId: GraphQLID {
        get {
          return snapshot["solutionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "solutionID")
        }
      }

      public var fileId: GraphQLID {
        get {
          return snapshot["fileID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "fileID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var file: File? {
        get {
          return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "file")
        }
      }

      public var size: Int? {
        get {
          return snapshot["size"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "size")
        }
      }

      public var preview: String? {
        get {
          return snapshot["preview"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "preview")
        }
      }

      public var version: Int {
        get {
          return snapshot["version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "version")
        }
      }

      public var archived: Bool? {
        get {
          return snapshot["archived"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "archived")
        }
      }

      public var solution: Solution {
        get {
          return Solution(snapshot: snapshot["solution"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "solution")
        }
      }

      public var members: Member? {
        get {
          return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "members")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct File: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Member: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateVersionMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateVersion($input: UpdateVersionInput!, $condition: ModelVersionConditionInput) {\n  updateVersion(input: $input, condition: $condition) {\n    __typename\n    id\n    solutionID\n    fileID\n    name\n    ownerUser\n    file {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    size\n    preview\n    version\n    archived\n    solution {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    members {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: UpdateVersionInput
  public var condition: ModelVersionConditionInput?

  public init(input: UpdateVersionInput, condition: ModelVersionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateVersion", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateVersion: UpdateVersion? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateVersion": updateVersion.flatMap { $0.snapshot }])
    }

    public var updateVersion: UpdateVersion? {
      get {
        return (snapshot["updateVersion"] as? Snapshot).flatMap { UpdateVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateVersion")
      }
    }

    public struct UpdateVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["Version"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("file", type: .object(File.selections)),
        GraphQLField("size", type: .scalar(Int.self)),
        GraphQLField("preview", type: .scalar(String.self)),
        GraphQLField("version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("archived", type: .scalar(Bool.self)),
        GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
        GraphQLField("members", type: .object(Member.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var solutionId: GraphQLID {
        get {
          return snapshot["solutionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "solutionID")
        }
      }

      public var fileId: GraphQLID {
        get {
          return snapshot["fileID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "fileID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var file: File? {
        get {
          return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "file")
        }
      }

      public var size: Int? {
        get {
          return snapshot["size"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "size")
        }
      }

      public var preview: String? {
        get {
          return snapshot["preview"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "preview")
        }
      }

      public var version: Int {
        get {
          return snapshot["version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "version")
        }
      }

      public var archived: Bool? {
        get {
          return snapshot["archived"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "archived")
        }
      }

      public var solution: Solution {
        get {
          return Solution(snapshot: snapshot["solution"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "solution")
        }
      }

      public var members: Member? {
        get {
          return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "members")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct File: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Member: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteVersionMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteVersion($input: DeleteVersionInput!, $condition: ModelVersionConditionInput) {\n  deleteVersion(input: $input, condition: $condition) {\n    __typename\n    id\n    solutionID\n    fileID\n    name\n    ownerUser\n    file {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    size\n    preview\n    version\n    archived\n    solution {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    members {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: DeleteVersionInput
  public var condition: ModelVersionConditionInput?

  public init(input: DeleteVersionInput, condition: ModelVersionConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteVersion", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteVersion: DeleteVersion? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteVersion": deleteVersion.flatMap { $0.snapshot }])
    }

    public var deleteVersion: DeleteVersion? {
      get {
        return (snapshot["deleteVersion"] as? Snapshot).flatMap { DeleteVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteVersion")
      }
    }

    public struct DeleteVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["Version"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("file", type: .object(File.selections)),
        GraphQLField("size", type: .scalar(Int.self)),
        GraphQLField("preview", type: .scalar(String.self)),
        GraphQLField("version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("archived", type: .scalar(Bool.self)),
        GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
        GraphQLField("members", type: .object(Member.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var solutionId: GraphQLID {
        get {
          return snapshot["solutionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "solutionID")
        }
      }

      public var fileId: GraphQLID {
        get {
          return snapshot["fileID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "fileID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var file: File? {
        get {
          return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "file")
        }
      }

      public var size: Int? {
        get {
          return snapshot["size"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "size")
        }
      }

      public var preview: String? {
        get {
          return snapshot["preview"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "preview")
        }
      }

      public var version: Int {
        get {
          return snapshot["version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "version")
        }
      }

      public var archived: Bool? {
        get {
          return snapshot["archived"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "archived")
        }
      }

      public var solution: Solution {
        get {
          return Solution(snapshot: snapshot["solution"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "solution")
        }
      }

      public var members: Member? {
        get {
          return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "members")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct File: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Member: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateS3ObjectFileMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateS3ObjectFile($input: CreateS3ObjectFileInput!, $condition: ModelS3ObjectFileConditionInput) {\n  createS3ObjectFile(input: $input, condition: $condition) {\n    __typename\n    id\n    bucket\n    region\n    key\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: CreateS3ObjectFileInput
  public var condition: ModelS3ObjectFileConditionInput?

  public init(input: CreateS3ObjectFileInput, condition: ModelS3ObjectFileConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createS3ObjectFile", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createS3ObjectFile: CreateS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createS3ObjectFile": createS3ObjectFile.flatMap { $0.snapshot }])
    }

    public var createS3ObjectFile: CreateS3ObjectFile? {
      get {
        return (snapshot["createS3ObjectFile"] as? Snapshot).flatMap { CreateS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createS3ObjectFile")
      }
    }

    public struct CreateS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["S3ObjectFile"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("region", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var region: String? {
        get {
          return snapshot["region"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "region")
        }
      }

      public var key: String? {
        get {
          return snapshot["key"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "key")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class UpdateS3ObjectFileMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateS3ObjectFile($input: UpdateS3ObjectFileInput!, $condition: ModelS3ObjectFileConditionInput) {\n  updateS3ObjectFile(input: $input, condition: $condition) {\n    __typename\n    id\n    bucket\n    region\n    key\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: UpdateS3ObjectFileInput
  public var condition: ModelS3ObjectFileConditionInput?

  public init(input: UpdateS3ObjectFileInput, condition: ModelS3ObjectFileConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateS3ObjectFile", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateS3ObjectFile: UpdateS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateS3ObjectFile": updateS3ObjectFile.flatMap { $0.snapshot }])
    }

    public var updateS3ObjectFile: UpdateS3ObjectFile? {
      get {
        return (snapshot["updateS3ObjectFile"] as? Snapshot).flatMap { UpdateS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateS3ObjectFile")
      }
    }

    public struct UpdateS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["S3ObjectFile"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("region", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var region: String? {
        get {
          return snapshot["region"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "region")
        }
      }

      public var key: String? {
        get {
          return snapshot["key"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "key")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class DeleteS3ObjectFileMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteS3ObjectFile($input: DeleteS3ObjectFileInput!, $condition: ModelS3ObjectFileConditionInput) {\n  deleteS3ObjectFile(input: $input, condition: $condition) {\n    __typename\n    id\n    bucket\n    region\n    key\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var input: DeleteS3ObjectFileInput
  public var condition: ModelS3ObjectFileConditionInput?

  public init(input: DeleteS3ObjectFileInput, condition: ModelS3ObjectFileConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteS3ObjectFile", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteS3ObjectFile: DeleteS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteS3ObjectFile": deleteS3ObjectFile.flatMap { $0.snapshot }])
    }

    public var deleteS3ObjectFile: DeleteS3ObjectFile? {
      get {
        return (snapshot["deleteS3ObjectFile"] as? Snapshot).flatMap { DeleteS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteS3ObjectFile")
      }
    }

    public struct DeleteS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["S3ObjectFile"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("region", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var region: String? {
        get {
          return snapshot["region"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "region")
        }
      }

      public var key: String? {
        get {
          return snapshot["key"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "key")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class SyncTenantsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncTenants($filter: ModelTenantFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncTenants(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelTenantFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelTenantFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncTenants", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncTenants: SyncTenant? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncTenants": syncTenants.flatMap { $0.snapshot }])
    }

    public var syncTenants: SyncTenant? {
      get {
        return (snapshot["syncTenants"] as? Snapshot).flatMap { SyncTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncTenants")
      }
    }

    public struct SyncTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelTenantConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelTenantConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetTenantQuery: GraphQLQuery {
  public static let operationString =
    "query GetTenant($id: ID!) {\n  getTenant(id: $id) {\n    __typename\n    id\n    name\n    address1\n    address2\n    city\n    postcode\n    bucket\n    solutions {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    users {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        email\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        solo\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        admin\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getTenant", arguments: ["id": GraphQLVariable("id")], type: .object(GetTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getTenant: GetTenant? = nil) {
      self.init(snapshot: ["__typename": "Query", "getTenant": getTenant.flatMap { $0.snapshot }])
    }

    public var getTenant: GetTenant? {
      get {
        return (snapshot["getTenant"] as? Snapshot).flatMap { GetTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getTenant")
      }
    }

    public struct GetTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["Tenant"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("address1", type: .nonNull(.scalar(String.self))),
        GraphQLField("address2", type: .scalar(String.self)),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("solutions", type: .object(Solution.selections)),
        GraphQLField("users", type: .object(User.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var address1: String {
        get {
          return snapshot["address1"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address1")
        }
      }

      public var address2: String? {
        get {
          return snapshot["address2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address2")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var postcode: String {
        get {
          return snapshot["postcode"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "postcode")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var solutions: Solution? {
        get {
          return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
        }
      }

      public var users: User? {
        get {
          return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "users")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelSolutionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .object(Tenant.selections)),
            GraphQLField("solo", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
            GraphQLField("admin", type: .scalar(Bool.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var tenant: Tenant? {
            get {
              return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
            }
          }

          public var solo: Bool? {
            get {
              return snapshot["solo"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "solo")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public var admin: Bool? {
            get {
              return snapshot["admin"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "admin")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ListTenantsQuery: GraphQLQuery {
  public static let operationString =
    "query ListTenants($filter: ModelTenantFilterInput, $limit: Int, $nextToken: String) {\n  listTenants(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelTenantFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelTenantFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listTenants", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listTenants: ListTenant? = nil) {
      self.init(snapshot: ["__typename": "Query", "listTenants": listTenants.flatMap { $0.snapshot }])
    }

    public var listTenants: ListTenant? {
      get {
        return (snapshot["listTenants"] as? Snapshot).flatMap { ListTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listTenants")
      }
    }

    public struct ListTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelTenantConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelTenantConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class SyncUsersQuery: GraphQLQuery {
  public static let operationString =
    "query SyncUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncUsers(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      tenantID\n      name\n      email\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      solo\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      admin\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelUserFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncUsers: SyncUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncUsers": syncUsers.flatMap { $0.snapshot }])
    }

    public var syncUsers: SyncUser? {
      get {
        return (snapshot["syncUsers"] as? Snapshot).flatMap { SyncUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncUsers")
      }
    }

    public struct SyncUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .object(Tenant.selections)),
          GraphQLField("solo", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
          GraphQLField("admin", type: .scalar(Bool.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var tenant: Tenant? {
          get {
            return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
          }
        }

        public var solo: Bool? {
          get {
            return snapshot["solo"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "solo")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public var admin: Bool? {
          get {
            return snapshot["admin"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "admin")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetUserQuery: GraphQLQuery {
  public static let operationString =
    "query GetUser($id: ID!) {\n  getUser(id: $id) {\n    __typename\n    id\n    tenantID\n    name\n    email\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    solo\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    admin\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getUser", arguments: ["id": GraphQLVariable("id")], type: .object(GetUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getUser: GetUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "getUser": getUser.flatMap { $0.snapshot }])
    }

    public var getUser: GetUser? {
      get {
        return (snapshot["getUser"] as? Snapshot).flatMap { GetUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getUser")
      }
    }

    public struct GetUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .object(Tenant.selections)),
        GraphQLField("solo", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
        GraphQLField("admin", type: .scalar(Bool.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var tenant: Tenant? {
        get {
          return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
        }
      }

      public var solo: Bool? {
        get {
          return snapshot["solo"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "solo")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public var admin: Bool? {
        get {
          return snapshot["admin"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "admin")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ListUsersQuery: GraphQLQuery {
  public static let operationString =
    "query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n  listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      tenantID\n      name\n      email\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      solo\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      admin\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listUsers: ListUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "listUsers": listUsers.flatMap { $0.snapshot }])
    }

    public var listUsers: ListUser? {
      get {
        return (snapshot["listUsers"] as? Snapshot).flatMap { ListUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listUsers")
      }
    }

    public struct ListUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .object(Tenant.selections)),
          GraphQLField("solo", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
          GraphQLField("admin", type: .scalar(Bool.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var tenant: Tenant? {
          get {
            return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
          }
        }

        public var solo: Bool? {
          get {
            return snapshot["solo"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "solo")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public var admin: Bool? {
          get {
            return snapshot["admin"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "admin")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class SyncUserVersionsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncUserVersions($filter: ModelUserVersionFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncUserVersions(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      userID\n      versionID\n      user {\n        __typename\n        id\n        tenantID\n        name\n        email\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        solo\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        admin\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      role\n      versionRecord {\n        __typename\n        id\n        solutionID\n        fileID\n        name\n        ownerUser\n        file {\n          __typename\n          id\n          bucket\n          region\n          key\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        size\n        preview\n        version\n        archived\n        solution {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        members {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelUserVersionFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelUserVersionFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncUserVersions", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncUserVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncUserVersions: SyncUserVersion? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncUserVersions": syncUserVersions.flatMap { $0.snapshot }])
    }

    public var syncUserVersions: SyncUserVersion? {
      get {
        return (snapshot["syncUserVersions"] as? Snapshot).flatMap { SyncUserVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncUserVersions")
      }
    }

    public struct SyncUserVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserVersionConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["UserVersion"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("user", type: .object(User.selections)),
          GraphQLField("role", type: .scalar(Role.self)),
          GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var userId: GraphQLID {
          get {
            return snapshot["userID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var versionId: GraphQLID {
          get {
            return snapshot["versionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "versionID")
          }
        }

        public var user: User? {
          get {
            return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "user")
          }
        }

        public var role: Role? {
          get {
            return snapshot["role"] as? Role
          }
          set {
            snapshot.updateValue(newValue, forKey: "role")
          }
        }

        public var versionRecord: VersionRecord? {
          get {
            return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .object(Tenant.selections)),
            GraphQLField("solo", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
            GraphQLField("admin", type: .scalar(Bool.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var tenant: Tenant? {
            get {
              return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
            }
          }

          public var solo: Bool? {
            get {
              return snapshot["solo"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "solo")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public var admin: Bool? {
            get {
              return snapshot["admin"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "admin")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct VersionRecord: GraphQLSelectionSet {
          public static let possibleTypes = ["Version"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("file", type: .object(File.selections)),
            GraphQLField("size", type: .scalar(Int.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("archived", type: .scalar(Bool.self)),
            GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
            GraphQLField("members", type: .object(Member.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var solutionId: GraphQLID {
            get {
              return snapshot["solutionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "solutionID")
            }
          }

          public var fileId: GraphQLID {
            get {
              return snapshot["fileID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "fileID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var file: File? {
            get {
              return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "file")
            }
          }

          public var size: Int? {
            get {
              return snapshot["size"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "size")
            }
          }

          public var preview: String? {
            get {
              return snapshot["preview"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "preview")
            }
          }

          public var version: Int {
            get {
              return snapshot["version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "version")
            }
          }

          public var archived: Bool? {
            get {
              return snapshot["archived"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "archived")
            }
          }

          public var solution: Solution {
            get {
              return Solution(snapshot: snapshot["solution"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "solution")
            }
          }

          public var members: Member? {
            get {
              return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "members")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct File: GraphQLSelectionSet {
            public static let possibleTypes = ["S3ObjectFile"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var region: String? {
              get {
                return snapshot["region"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "region")
              }
            }

            public var key: String? {
              get {
                return snapshot["key"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "key")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Member: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class SyncSolutionsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncSolutions($filter: ModelSolutionFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncSolutions(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelSolutionFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelSolutionFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncSolutions", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncSolutions: SyncSolution? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncSolutions": syncSolutions.flatMap { $0.snapshot }])
    }

    public var syncSolutions: SyncSolution? {
      get {
        return (snapshot["syncSolutions"] as? Snapshot).flatMap { SyncSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncSolutions")
      }
    }

    public struct SyncSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelSolutionConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetSolutionQuery: GraphQLQuery {
  public static let operationString =
    "query GetSolution($id: ID!) {\n  getSolution(id: $id) {\n    __typename\n    id\n    tenantID\n    name\n    versions {\n      __typename\n      items {\n        __typename\n        id\n        solutionID\n        fileID\n        name\n        ownerUser\n        file {\n          __typename\n          id\n          bucket\n          region\n          key\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        size\n        preview\n        version\n        archived\n        solution {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        members {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    link\n    ownerUser\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getSolution", arguments: ["id": GraphQLVariable("id")], type: .object(GetSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getSolution: GetSolution? = nil) {
      self.init(snapshot: ["__typename": "Query", "getSolution": getSolution.flatMap { $0.snapshot }])
    }

    public var getSolution: GetSolution? {
      get {
        return (snapshot["getSolution"] as? Snapshot).flatMap { GetSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getSolution")
      }
    }

    public struct GetSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["Solution"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("versions", type: .object(Version.selections)),
        GraphQLField("link", type: .scalar(String.self)),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var versions: Version? {
        get {
          return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versions")
        }
      }

      public var link: String? {
        get {
          return snapshot["link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var tenant: Tenant {
        get {
          return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "tenant")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Version: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Version"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("file", type: .object(File.selections)),
            GraphQLField("size", type: .scalar(Int.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("archived", type: .scalar(Bool.self)),
            GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
            GraphQLField("members", type: .object(Member.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var solutionId: GraphQLID {
            get {
              return snapshot["solutionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "solutionID")
            }
          }

          public var fileId: GraphQLID {
            get {
              return snapshot["fileID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "fileID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var file: File? {
            get {
              return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "file")
            }
          }

          public var size: Int? {
            get {
              return snapshot["size"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "size")
            }
          }

          public var preview: String? {
            get {
              return snapshot["preview"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "preview")
            }
          }

          public var version: Int {
            get {
              return snapshot["version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "version")
            }
          }

          public var archived: Bool? {
            get {
              return snapshot["archived"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "archived")
            }
          }

          public var solution: Solution {
            get {
              return Solution(snapshot: snapshot["solution"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "solution")
            }
          }

          public var members: Member? {
            get {
              return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "members")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct File: GraphQLSelectionSet {
            public static let possibleTypes = ["S3ObjectFile"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var region: String? {
              get {
                return snapshot["region"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "region")
              }
            }

            public var key: String? {
              get {
                return snapshot["key"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "key")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Member: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ListSolutionsQuery: GraphQLQuery {
  public static let operationString =
    "query ListSolutions($filter: ModelSolutionFilterInput, $limit: Int, $nextToken: String) {\n  listSolutions(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelSolutionFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelSolutionFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listSolutions", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listSolutions: ListSolution? = nil) {
      self.init(snapshot: ["__typename": "Query", "listSolutions": listSolutions.flatMap { $0.snapshot }])
    }

    public var listSolutions: ListSolution? {
      get {
        return (snapshot["listSolutions"] as? Snapshot).flatMap { ListSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listSolutions")
      }
    }

    public struct ListSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelSolutionConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class SyncVersionsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncVersions($filter: ModelVersionFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncVersions(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      solutionID\n      fileID\n      name\n      ownerUser\n      file {\n        __typename\n        id\n        bucket\n        region\n        key\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      size\n      preview\n      version\n      archived\n      solution {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      members {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelVersionFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelVersionFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncVersions", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncVersions: SyncVersion? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncVersions": syncVersions.flatMap { $0.snapshot }])
    }

    public var syncVersions: SyncVersion? {
      get {
        return (snapshot["syncVersions"] as? Snapshot).flatMap { SyncVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncVersions")
      }
    }

    public struct SyncVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelVersionConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Version"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("file", type: .object(File.selections)),
          GraphQLField("size", type: .scalar(Int.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("archived", type: .scalar(Bool.self)),
          GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
          GraphQLField("members", type: .object(Member.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var solutionId: GraphQLID {
          get {
            return snapshot["solutionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "solutionID")
          }
        }

        public var fileId: GraphQLID {
          get {
            return snapshot["fileID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "fileID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var file: File? {
          get {
            return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "file")
          }
        }

        public var size: Int? {
          get {
            return snapshot["size"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "size")
          }
        }

        public var preview: String? {
          get {
            return snapshot["preview"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "preview")
          }
        }

        public var version: Int {
          get {
            return snapshot["version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "version")
          }
        }

        public var archived: Bool? {
          get {
            return snapshot["archived"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "archived")
          }
        }

        public var solution: Solution {
          get {
            return Solution(snapshot: snapshot["solution"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "solution")
          }
        }

        public var members: Member? {
          get {
            return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "members")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct File: GraphQLSelectionSet {
          public static let possibleTypes = ["S3ObjectFile"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var region: String? {
            get {
              return snapshot["region"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "region")
            }
          }

          public var key: String? {
            get {
              return snapshot["key"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "key")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Member: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetVersionQuery: GraphQLQuery {
  public static let operationString =
    "query GetVersion($id: ID!) {\n  getVersion(id: $id) {\n    __typename\n    id\n    solutionID\n    fileID\n    name\n    ownerUser\n    file {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    size\n    preview\n    version\n    archived\n    solution {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    members {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getVersion", arguments: ["id": GraphQLVariable("id")], type: .object(GetVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getVersion: GetVersion? = nil) {
      self.init(snapshot: ["__typename": "Query", "getVersion": getVersion.flatMap { $0.snapshot }])
    }

    public var getVersion: GetVersion? {
      get {
        return (snapshot["getVersion"] as? Snapshot).flatMap { GetVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getVersion")
      }
    }

    public struct GetVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["Version"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("file", type: .object(File.selections)),
        GraphQLField("size", type: .scalar(Int.self)),
        GraphQLField("preview", type: .scalar(String.self)),
        GraphQLField("version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("archived", type: .scalar(Bool.self)),
        GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
        GraphQLField("members", type: .object(Member.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var solutionId: GraphQLID {
        get {
          return snapshot["solutionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "solutionID")
        }
      }

      public var fileId: GraphQLID {
        get {
          return snapshot["fileID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "fileID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var file: File? {
        get {
          return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "file")
        }
      }

      public var size: Int? {
        get {
          return snapshot["size"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "size")
        }
      }

      public var preview: String? {
        get {
          return snapshot["preview"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "preview")
        }
      }

      public var version: Int {
        get {
          return snapshot["version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "version")
        }
      }

      public var archived: Bool? {
        get {
          return snapshot["archived"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "archived")
        }
      }

      public var solution: Solution {
        get {
          return Solution(snapshot: snapshot["solution"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "solution")
        }
      }

      public var members: Member? {
        get {
          return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "members")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct File: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Member: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ListVersionsQuery: GraphQLQuery {
  public static let operationString =
    "query ListVersions($filter: ModelVersionFilterInput, $limit: Int, $nextToken: String) {\n  listVersions(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      solutionID\n      fileID\n      name\n      ownerUser\n      file {\n        __typename\n        id\n        bucket\n        region\n        key\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      size\n      preview\n      version\n      archived\n      solution {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      members {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelVersionFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelVersionFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listVersions", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listVersions: ListVersion? = nil) {
      self.init(snapshot: ["__typename": "Query", "listVersions": listVersions.flatMap { $0.snapshot }])
    }

    public var listVersions: ListVersion? {
      get {
        return (snapshot["listVersions"] as? Snapshot).flatMap { ListVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listVersions")
      }
    }

    public struct ListVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelVersionConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Version"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("file", type: .object(File.selections)),
          GraphQLField("size", type: .scalar(Int.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("archived", type: .scalar(Bool.self)),
          GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
          GraphQLField("members", type: .object(Member.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var solutionId: GraphQLID {
          get {
            return snapshot["solutionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "solutionID")
          }
        }

        public var fileId: GraphQLID {
          get {
            return snapshot["fileID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "fileID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var file: File? {
          get {
            return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "file")
          }
        }

        public var size: Int? {
          get {
            return snapshot["size"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "size")
          }
        }

        public var preview: String? {
          get {
            return snapshot["preview"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "preview")
          }
        }

        public var version: Int {
          get {
            return snapshot["version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "version")
          }
        }

        public var archived: Bool? {
          get {
            return snapshot["archived"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "archived")
          }
        }

        public var solution: Solution {
          get {
            return Solution(snapshot: snapshot["solution"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "solution")
          }
        }

        public var members: Member? {
          get {
            return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "members")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct File: GraphQLSelectionSet {
          public static let possibleTypes = ["S3ObjectFile"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var region: String? {
            get {
              return snapshot["region"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "region")
            }
          }

          public var key: String? {
            get {
              return snapshot["key"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "key")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Member: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class SyncS3ObjectFilesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncS3ObjectFiles($filter: ModelS3ObjectFileFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncS3ObjectFiles(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelS3ObjectFileFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelS3ObjectFileFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncS3ObjectFiles", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncS3ObjectFiles: SyncS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncS3ObjectFiles": syncS3ObjectFiles.flatMap { $0.snapshot }])
    }

    public var syncS3ObjectFiles: SyncS3ObjectFile? {
      get {
        return (snapshot["syncS3ObjectFiles"] as? Snapshot).flatMap { SyncS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncS3ObjectFiles")
      }
    }

    public struct SyncS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelS3ObjectFileConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelS3ObjectFileConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }
    }
  }
}

public final class GetS3ObjectFileQuery: GraphQLQuery {
  public static let operationString =
    "query GetS3ObjectFile($id: ID!) {\n  getS3ObjectFile(id: $id) {\n    __typename\n    id\n    bucket\n    region\n    key\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getS3ObjectFile", arguments: ["id": GraphQLVariable("id")], type: .object(GetS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getS3ObjectFile: GetS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Query", "getS3ObjectFile": getS3ObjectFile.flatMap { $0.snapshot }])
    }

    public var getS3ObjectFile: GetS3ObjectFile? {
      get {
        return (snapshot["getS3ObjectFile"] as? Snapshot).flatMap { GetS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getS3ObjectFile")
      }
    }

    public struct GetS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["S3ObjectFile"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("region", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var region: String? {
        get {
          return snapshot["region"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "region")
        }
      }

      public var key: String? {
        get {
          return snapshot["key"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "key")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class ListS3ObjectFilesQuery: GraphQLQuery {
  public static let operationString =
    "query ListS3ObjectFiles($filter: ModelS3ObjectFileFilterInput, $limit: Int, $nextToken: String) {\n  listS3ObjectFiles(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelS3ObjectFileFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelS3ObjectFileFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listS3ObjectFiles", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listS3ObjectFiles: ListS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Query", "listS3ObjectFiles": listS3ObjectFiles.flatMap { $0.snapshot }])
    }

    public var listS3ObjectFiles: ListS3ObjectFile? {
      get {
        return (snapshot["listS3ObjectFiles"] as? Snapshot).flatMap { ListS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listS3ObjectFiles")
      }
    }

    public struct ListS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelS3ObjectFileConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelS3ObjectFileConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateTenantSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateTenant {\n  onCreateTenant {\n    __typename\n    id\n    name\n    address1\n    address2\n    city\n    postcode\n    bucket\n    solutions {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    users {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        email\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        solo\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        admin\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateTenant", type: .object(OnCreateTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateTenant: OnCreateTenant? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateTenant": onCreateTenant.flatMap { $0.snapshot }])
    }

    public var onCreateTenant: OnCreateTenant? {
      get {
        return (snapshot["onCreateTenant"] as? Snapshot).flatMap { OnCreateTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateTenant")
      }
    }

    public struct OnCreateTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["Tenant"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("address1", type: .nonNull(.scalar(String.self))),
        GraphQLField("address2", type: .scalar(String.self)),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("solutions", type: .object(Solution.selections)),
        GraphQLField("users", type: .object(User.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var address1: String {
        get {
          return snapshot["address1"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address1")
        }
      }

      public var address2: String? {
        get {
          return snapshot["address2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address2")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var postcode: String {
        get {
          return snapshot["postcode"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "postcode")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var solutions: Solution? {
        get {
          return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
        }
      }

      public var users: User? {
        get {
          return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "users")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelSolutionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .object(Tenant.selections)),
            GraphQLField("solo", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
            GraphQLField("admin", type: .scalar(Bool.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var tenant: Tenant? {
            get {
              return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
            }
          }

          public var solo: Bool? {
            get {
              return snapshot["solo"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "solo")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public var admin: Bool? {
            get {
              return snapshot["admin"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "admin")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateTenantSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateTenant {\n  onUpdateTenant {\n    __typename\n    id\n    name\n    address1\n    address2\n    city\n    postcode\n    bucket\n    solutions {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    users {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        email\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        solo\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        admin\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateTenant", type: .object(OnUpdateTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateTenant: OnUpdateTenant? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateTenant": onUpdateTenant.flatMap { $0.snapshot }])
    }

    public var onUpdateTenant: OnUpdateTenant? {
      get {
        return (snapshot["onUpdateTenant"] as? Snapshot).flatMap { OnUpdateTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateTenant")
      }
    }

    public struct OnUpdateTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["Tenant"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("address1", type: .nonNull(.scalar(String.self))),
        GraphQLField("address2", type: .scalar(String.self)),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("solutions", type: .object(Solution.selections)),
        GraphQLField("users", type: .object(User.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var address1: String {
        get {
          return snapshot["address1"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address1")
        }
      }

      public var address2: String? {
        get {
          return snapshot["address2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address2")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var postcode: String {
        get {
          return snapshot["postcode"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "postcode")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var solutions: Solution? {
        get {
          return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
        }
      }

      public var users: User? {
        get {
          return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "users")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelSolutionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .object(Tenant.selections)),
            GraphQLField("solo", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
            GraphQLField("admin", type: .scalar(Bool.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var tenant: Tenant? {
            get {
              return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
            }
          }

          public var solo: Bool? {
            get {
              return snapshot["solo"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "solo")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public var admin: Bool? {
            get {
              return snapshot["admin"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "admin")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteTenantSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteTenant {\n  onDeleteTenant {\n    __typename\n    id\n    name\n    address1\n    address2\n    city\n    postcode\n    bucket\n    solutions {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    users {\n      __typename\n      items {\n        __typename\n        id\n        tenantID\n        name\n        email\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        solo\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        admin\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteTenant", type: .object(OnDeleteTenant.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteTenant: OnDeleteTenant? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteTenant": onDeleteTenant.flatMap { $0.snapshot }])
    }

    public var onDeleteTenant: OnDeleteTenant? {
      get {
        return (snapshot["onDeleteTenant"] as? Snapshot).flatMap { OnDeleteTenant(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteTenant")
      }
    }

    public struct OnDeleteTenant: GraphQLSelectionSet {
      public static let possibleTypes = ["Tenant"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("address1", type: .nonNull(.scalar(String.self))),
        GraphQLField("address2", type: .scalar(String.self)),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("solutions", type: .object(Solution.selections)),
        GraphQLField("users", type: .object(User.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var address1: String {
        get {
          return snapshot["address1"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address1")
        }
      }

      public var address2: String? {
        get {
          return snapshot["address2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "address2")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var postcode: String {
        get {
          return snapshot["postcode"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "postcode")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var solutions: Solution? {
        get {
          return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
        }
      }

      public var users: User? {
        get {
          return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "users")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelSolutionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .object(Tenant.selections)),
            GraphQLField("solo", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
            GraphQLField("admin", type: .scalar(Bool.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var tenant: Tenant? {
            get {
              return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
            }
          }

          public var solo: Bool? {
            get {
              return snapshot["solo"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "solo")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public var admin: Bool? {
            get {
              return snapshot["admin"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "admin")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateUser {\n  onCreateUser {\n    __typename\n    id\n    tenantID\n    name\n    email\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    solo\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    admin\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateUser", type: .object(OnCreateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateUser: OnCreateUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateUser": onCreateUser.flatMap { $0.snapshot }])
    }

    public var onCreateUser: OnCreateUser? {
      get {
        return (snapshot["onCreateUser"] as? Snapshot).flatMap { OnCreateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateUser")
      }
    }

    public struct OnCreateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .object(Tenant.selections)),
        GraphQLField("solo", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
        GraphQLField("admin", type: .scalar(Bool.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var tenant: Tenant? {
        get {
          return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
        }
      }

      public var solo: Bool? {
        get {
          return snapshot["solo"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "solo")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public var admin: Bool? {
        get {
          return snapshot["admin"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "admin")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateUser {\n  onUpdateUser {\n    __typename\n    id\n    tenantID\n    name\n    email\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    solo\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    admin\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateUser", type: .object(OnUpdateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateUser: OnUpdateUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateUser": onUpdateUser.flatMap { $0.snapshot }])
    }

    public var onUpdateUser: OnUpdateUser? {
      get {
        return (snapshot["onUpdateUser"] as? Snapshot).flatMap { OnUpdateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateUser")
      }
    }

    public struct OnUpdateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .object(Tenant.selections)),
        GraphQLField("solo", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
        GraphQLField("admin", type: .scalar(Bool.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var tenant: Tenant? {
        get {
          return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
        }
      }

      public var solo: Bool? {
        get {
          return snapshot["solo"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "solo")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public var admin: Bool? {
        get {
          return snapshot["admin"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "admin")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteUser {\n  onDeleteUser {\n    __typename\n    id\n    tenantID\n    name\n    email\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    solo\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    admin\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteUser", type: .object(OnDeleteUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteUser: OnDeleteUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteUser": onDeleteUser.flatMap { $0.snapshot }])
    }

    public var onDeleteUser: OnDeleteUser? {
      get {
        return (snapshot["onDeleteUser"] as? Snapshot).flatMap { OnDeleteUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteUser")
      }
    }

    public struct OnDeleteUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .object(Tenant.selections)),
        GraphQLField("solo", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
        GraphQLField("admin", type: .scalar(Bool.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var tenant: Tenant? {
        get {
          return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
        }
      }

      public var solo: Bool? {
        get {
          return snapshot["solo"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "solo")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public var admin: Bool? {
        get {
          return snapshot["admin"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "admin")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateUserVersionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateUserVersion {\n  onCreateUserVersion {\n    __typename\n    id\n    userID\n    versionID\n    user {\n      __typename\n      id\n      tenantID\n      name\n      email\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      solo\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      admin\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    role\n    versionRecord {\n      __typename\n      id\n      solutionID\n      fileID\n      name\n      ownerUser\n      file {\n        __typename\n        id\n        bucket\n        region\n        key\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      size\n      preview\n      version\n      archived\n      solution {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      members {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateUserVersion", type: .object(OnCreateUserVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateUserVersion: OnCreateUserVersion? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateUserVersion": onCreateUserVersion.flatMap { $0.snapshot }])
    }

    public var onCreateUserVersion: OnCreateUserVersion? {
      get {
        return (snapshot["onCreateUserVersion"] as? Snapshot).flatMap { OnCreateUserVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateUserVersion")
      }
    }

    public struct OnCreateUserVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["UserVersion"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("role", type: .scalar(Role.self)),
        GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var versionId: GraphQLID {
        get {
          return snapshot["versionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "versionID")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var role: Role? {
        get {
          return snapshot["role"] as? Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var versionRecord: VersionRecord? {
        get {
          return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .object(Tenant.selections)),
          GraphQLField("solo", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
          GraphQLField("admin", type: .scalar(Bool.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var tenant: Tenant? {
          get {
            return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
          }
        }

        public var solo: Bool? {
          get {
            return snapshot["solo"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "solo")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public var admin: Bool? {
          get {
            return snapshot["admin"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "admin")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct VersionRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["Version"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("file", type: .object(File.selections)),
          GraphQLField("size", type: .scalar(Int.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("archived", type: .scalar(Bool.self)),
          GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
          GraphQLField("members", type: .object(Member.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var solutionId: GraphQLID {
          get {
            return snapshot["solutionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "solutionID")
          }
        }

        public var fileId: GraphQLID {
          get {
            return snapshot["fileID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "fileID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var file: File? {
          get {
            return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "file")
          }
        }

        public var size: Int? {
          get {
            return snapshot["size"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "size")
          }
        }

        public var preview: String? {
          get {
            return snapshot["preview"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "preview")
          }
        }

        public var version: Int {
          get {
            return snapshot["version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "version")
          }
        }

        public var archived: Bool? {
          get {
            return snapshot["archived"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "archived")
          }
        }

        public var solution: Solution {
          get {
            return Solution(snapshot: snapshot["solution"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "solution")
          }
        }

        public var members: Member? {
          get {
            return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "members")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct File: GraphQLSelectionSet {
          public static let possibleTypes = ["S3ObjectFile"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var region: String? {
            get {
              return snapshot["region"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "region")
            }
          }

          public var key: String? {
            get {
              return snapshot["key"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "key")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Member: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateUserVersionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateUserVersion {\n  onUpdateUserVersion {\n    __typename\n    id\n    userID\n    versionID\n    user {\n      __typename\n      id\n      tenantID\n      name\n      email\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      solo\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      admin\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    role\n    versionRecord {\n      __typename\n      id\n      solutionID\n      fileID\n      name\n      ownerUser\n      file {\n        __typename\n        id\n        bucket\n        region\n        key\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      size\n      preview\n      version\n      archived\n      solution {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      members {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateUserVersion", type: .object(OnUpdateUserVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateUserVersion: OnUpdateUserVersion? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateUserVersion": onUpdateUserVersion.flatMap { $0.snapshot }])
    }

    public var onUpdateUserVersion: OnUpdateUserVersion? {
      get {
        return (snapshot["onUpdateUserVersion"] as? Snapshot).flatMap { OnUpdateUserVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateUserVersion")
      }
    }

    public struct OnUpdateUserVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["UserVersion"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("role", type: .scalar(Role.self)),
        GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var versionId: GraphQLID {
        get {
          return snapshot["versionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "versionID")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var role: Role? {
        get {
          return snapshot["role"] as? Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var versionRecord: VersionRecord? {
        get {
          return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .object(Tenant.selections)),
          GraphQLField("solo", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
          GraphQLField("admin", type: .scalar(Bool.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var tenant: Tenant? {
          get {
            return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
          }
        }

        public var solo: Bool? {
          get {
            return snapshot["solo"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "solo")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public var admin: Bool? {
          get {
            return snapshot["admin"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "admin")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct VersionRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["Version"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("file", type: .object(File.selections)),
          GraphQLField("size", type: .scalar(Int.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("archived", type: .scalar(Bool.self)),
          GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
          GraphQLField("members", type: .object(Member.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var solutionId: GraphQLID {
          get {
            return snapshot["solutionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "solutionID")
          }
        }

        public var fileId: GraphQLID {
          get {
            return snapshot["fileID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "fileID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var file: File? {
          get {
            return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "file")
          }
        }

        public var size: Int? {
          get {
            return snapshot["size"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "size")
          }
        }

        public var preview: String? {
          get {
            return snapshot["preview"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "preview")
          }
        }

        public var version: Int {
          get {
            return snapshot["version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "version")
          }
        }

        public var archived: Bool? {
          get {
            return snapshot["archived"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "archived")
          }
        }

        public var solution: Solution {
          get {
            return Solution(snapshot: snapshot["solution"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "solution")
          }
        }

        public var members: Member? {
          get {
            return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "members")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct File: GraphQLSelectionSet {
          public static let possibleTypes = ["S3ObjectFile"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var region: String? {
            get {
              return snapshot["region"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "region")
            }
          }

          public var key: String? {
            get {
              return snapshot["key"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "key")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Member: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteUserVersionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteUserVersion {\n  onDeleteUserVersion {\n    __typename\n    id\n    userID\n    versionID\n    user {\n      __typename\n      id\n      tenantID\n      name\n      email\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      solo\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      admin\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    role\n    versionRecord {\n      __typename\n      id\n      solutionID\n      fileID\n      name\n      ownerUser\n      file {\n        __typename\n        id\n        bucket\n        region\n        key\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      size\n      preview\n      version\n      archived\n      solution {\n        __typename\n        id\n        tenantID\n        name\n        versions {\n          __typename\n          items {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        link\n        ownerUser\n        tenant {\n          __typename\n          id\n          name\n          address1\n          address2\n          city\n          postcode\n          bucket\n          solutions {\n            __typename\n            nextToken\n            startedAt\n          }\n          users {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      members {\n        __typename\n        items {\n          __typename\n          id\n          userID\n          versionID\n          user {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          role\n          versionRecord {\n            __typename\n            id\n            solutionID\n            fileID\n            name\n            ownerUser\n            size\n            preview\n            version\n            archived\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteUserVersion", type: .object(OnDeleteUserVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteUserVersion: OnDeleteUserVersion? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteUserVersion": onDeleteUserVersion.flatMap { $0.snapshot }])
    }

    public var onDeleteUserVersion: OnDeleteUserVersion? {
      get {
        return (snapshot["onDeleteUserVersion"] as? Snapshot).flatMap { OnDeleteUserVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteUserVersion")
      }
    }

    public struct OnDeleteUserVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["UserVersion"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("role", type: .scalar(Role.self)),
        GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var versionId: GraphQLID {
        get {
          return snapshot["versionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "versionID")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var role: Role? {
        get {
          return snapshot["role"] as? Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var versionRecord: VersionRecord? {
        get {
          return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .object(Tenant.selections)),
          GraphQLField("solo", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
          GraphQLField("admin", type: .scalar(Bool.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var tenant: Tenant? {
          get {
            return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
          }
        }

        public var solo: Bool? {
          get {
            return snapshot["solo"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "solo")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public var admin: Bool? {
          get {
            return snapshot["admin"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "admin")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct VersionRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["Version"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("file", type: .object(File.selections)),
          GraphQLField("size", type: .scalar(Int.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("archived", type: .scalar(Bool.self)),
          GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
          GraphQLField("members", type: .object(Member.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var solutionId: GraphQLID {
          get {
            return snapshot["solutionID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "solutionID")
          }
        }

        public var fileId: GraphQLID {
          get {
            return snapshot["fileID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "fileID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var file: File? {
          get {
            return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "file")
          }
        }

        public var size: Int? {
          get {
            return snapshot["size"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "size")
          }
        }

        public var preview: String? {
          get {
            return snapshot["preview"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "preview")
          }
        }

        public var version: Int {
          get {
            return snapshot["version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "version")
          }
        }

        public var archived: Bool? {
          get {
            return snapshot["archived"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "archived")
          }
        }

        public var solution: Solution {
          get {
            return Solution(snapshot: snapshot["solution"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "solution")
          }
        }

        public var members: Member? {
          get {
            return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "members")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct File: GraphQLSelectionSet {
          public static let possibleTypes = ["S3ObjectFile"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var region: String? {
            get {
              return snapshot["region"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "region")
            }
          }

          public var key: String? {
            get {
              return snapshot["key"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "key")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["Solution"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("versions", type: .object(Version.selections)),
            GraphQLField("link", type: .scalar(String.self)),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var tenantId: GraphQLID {
            get {
              return snapshot["tenantID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "tenantID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var versions: Version? {
            get {
              return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versions")
            }
          }

          public var link: String? {
            get {
              return snapshot["link"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "link")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var tenant: Tenant {
            get {
              return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "tenant")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Version: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Tenant: GraphQLSelectionSet {
            public static let possibleTypes = ["Tenant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("address1", type: .nonNull(.scalar(String.self))),
              GraphQLField("address2", type: .scalar(String.self)),
              GraphQLField("city", type: .nonNull(.scalar(String.self))),
              GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("solutions", type: .object(Solution.selections)),
              GraphQLField("users", type: .object(User.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var address1: String {
              get {
                return snapshot["address1"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address1")
              }
            }

            public var address2: String? {
              get {
                return snapshot["address2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "address2")
              }
            }

            public var city: String {
              get {
                return snapshot["city"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "city")
              }
            }

            public var postcode: String {
              get {
                return snapshot["postcode"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "postcode")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var solutions: Solution? {
              get {
                return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
              }
            }

            public var users: User? {
              get {
                return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "users")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelSolutionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelSolutionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Member: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["UserVersion"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("role", type: .scalar(Role.self)),
              GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userID")
              }
            }

            public var versionId: GraphQLID {
              get {
                return snapshot["versionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "versionID")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var role: Role? {
              get {
                return snapshot["role"] as? Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var versionRecord: VersionRecord? {
              get {
                return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct VersionRecord: GraphQLSelectionSet {
              public static let possibleTypes = ["Version"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(Int.self)),
                GraphQLField("preview", type: .scalar(String.self)),
                GraphQLField("version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("archived", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "size": size, "preview": preview, "version": version, "archived": archived, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var solutionId: GraphQLID {
                get {
                  return snapshot["solutionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solutionID")
                }
              }

              public var fileId: GraphQLID {
                get {
                  return snapshot["fileID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "fileID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var size: Int? {
                get {
                  return snapshot["size"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "size")
                }
              }

              public var preview: String? {
                get {
                  return snapshot["preview"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "preview")
                }
              }

              public var version: Int {
                get {
                  return snapshot["version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "version")
                }
              }

              public var archived: Bool? {
                get {
                  return snapshot["archived"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "archived")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateSolutionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateSolution {\n  onCreateSolution {\n    __typename\n    id\n    tenantID\n    name\n    versions {\n      __typename\n      items {\n        __typename\n        id\n        solutionID\n        fileID\n        name\n        ownerUser\n        file {\n          __typename\n          id\n          bucket\n          region\n          key\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        size\n        preview\n        version\n        archived\n        solution {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        members {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    link\n    ownerUser\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateSolution", type: .object(OnCreateSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateSolution: OnCreateSolution? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateSolution": onCreateSolution.flatMap { $0.snapshot }])
    }

    public var onCreateSolution: OnCreateSolution? {
      get {
        return (snapshot["onCreateSolution"] as? Snapshot).flatMap { OnCreateSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateSolution")
      }
    }

    public struct OnCreateSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["Solution"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("versions", type: .object(Version.selections)),
        GraphQLField("link", type: .scalar(String.self)),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var versions: Version? {
        get {
          return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versions")
        }
      }

      public var link: String? {
        get {
          return snapshot["link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var tenant: Tenant {
        get {
          return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "tenant")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Version: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Version"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("file", type: .object(File.selections)),
            GraphQLField("size", type: .scalar(Int.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("archived", type: .scalar(Bool.self)),
            GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
            GraphQLField("members", type: .object(Member.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var solutionId: GraphQLID {
            get {
              return snapshot["solutionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "solutionID")
            }
          }

          public var fileId: GraphQLID {
            get {
              return snapshot["fileID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "fileID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var file: File? {
            get {
              return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "file")
            }
          }

          public var size: Int? {
            get {
              return snapshot["size"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "size")
            }
          }

          public var preview: String? {
            get {
              return snapshot["preview"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "preview")
            }
          }

          public var version: Int {
            get {
              return snapshot["version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "version")
            }
          }

          public var archived: Bool? {
            get {
              return snapshot["archived"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "archived")
            }
          }

          public var solution: Solution {
            get {
              return Solution(snapshot: snapshot["solution"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "solution")
            }
          }

          public var members: Member? {
            get {
              return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "members")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct File: GraphQLSelectionSet {
            public static let possibleTypes = ["S3ObjectFile"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var region: String? {
              get {
                return snapshot["region"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "region")
              }
            }

            public var key: String? {
              get {
                return snapshot["key"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "key")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Member: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateSolutionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateSolution {\n  onUpdateSolution {\n    __typename\n    id\n    tenantID\n    name\n    versions {\n      __typename\n      items {\n        __typename\n        id\n        solutionID\n        fileID\n        name\n        ownerUser\n        file {\n          __typename\n          id\n          bucket\n          region\n          key\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        size\n        preview\n        version\n        archived\n        solution {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        members {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    link\n    ownerUser\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateSolution", type: .object(OnUpdateSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateSolution: OnUpdateSolution? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateSolution": onUpdateSolution.flatMap { $0.snapshot }])
    }

    public var onUpdateSolution: OnUpdateSolution? {
      get {
        return (snapshot["onUpdateSolution"] as? Snapshot).flatMap { OnUpdateSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateSolution")
      }
    }

    public struct OnUpdateSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["Solution"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("versions", type: .object(Version.selections)),
        GraphQLField("link", type: .scalar(String.self)),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var versions: Version? {
        get {
          return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versions")
        }
      }

      public var link: String? {
        get {
          return snapshot["link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var tenant: Tenant {
        get {
          return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "tenant")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Version: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Version"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("file", type: .object(File.selections)),
            GraphQLField("size", type: .scalar(Int.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("archived", type: .scalar(Bool.self)),
            GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
            GraphQLField("members", type: .object(Member.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var solutionId: GraphQLID {
            get {
              return snapshot["solutionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "solutionID")
            }
          }

          public var fileId: GraphQLID {
            get {
              return snapshot["fileID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "fileID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var file: File? {
            get {
              return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "file")
            }
          }

          public var size: Int? {
            get {
              return snapshot["size"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "size")
            }
          }

          public var preview: String? {
            get {
              return snapshot["preview"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "preview")
            }
          }

          public var version: Int {
            get {
              return snapshot["version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "version")
            }
          }

          public var archived: Bool? {
            get {
              return snapshot["archived"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "archived")
            }
          }

          public var solution: Solution {
            get {
              return Solution(snapshot: snapshot["solution"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "solution")
            }
          }

          public var members: Member? {
            get {
              return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "members")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct File: GraphQLSelectionSet {
            public static let possibleTypes = ["S3ObjectFile"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var region: String? {
              get {
                return snapshot["region"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "region")
              }
            }

            public var key: String? {
              get {
                return snapshot["key"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "key")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Member: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteSolutionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteSolution {\n  onDeleteSolution {\n    __typename\n    id\n    tenantID\n    name\n    versions {\n      __typename\n      items {\n        __typename\n        id\n        solutionID\n        fileID\n        name\n        ownerUser\n        file {\n          __typename\n          id\n          bucket\n          region\n          key\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        size\n        preview\n        version\n        archived\n        solution {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        members {\n          __typename\n          items {\n            __typename\n            id\n            userID\n            versionID\n            role\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    link\n    ownerUser\n    tenant {\n      __typename\n      id\n      name\n      address1\n      address2\n      city\n      postcode\n      bucket\n      solutions {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          versions {\n            __typename\n            nextToken\n            startedAt\n          }\n          link\n          ownerUser\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      users {\n        __typename\n        items {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteSolution", type: .object(OnDeleteSolution.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteSolution: OnDeleteSolution? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteSolution": onDeleteSolution.flatMap { $0.snapshot }])
    }

    public var onDeleteSolution: OnDeleteSolution? {
      get {
        return (snapshot["onDeleteSolution"] as? Snapshot).flatMap { OnDeleteSolution(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteSolution")
      }
    }

    public struct OnDeleteSolution: GraphQLSelectionSet {
      public static let possibleTypes = ["Solution"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("versions", type: .object(Version.selections)),
        GraphQLField("link", type: .scalar(String.self)),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var tenantId: GraphQLID {
        get {
          return snapshot["tenantID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "tenantID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var versions: Version? {
        get {
          return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "versions")
        }
      }

      public var link: String? {
        get {
          return snapshot["link"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var tenant: Tenant {
        get {
          return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "tenant")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Version: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Version"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
            GraphQLField("file", type: .object(File.selections)),
            GraphQLField("size", type: .scalar(Int.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("archived", type: .scalar(Bool.self)),
            GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
            GraphQLField("members", type: .object(Member.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var solutionId: GraphQLID {
            get {
              return snapshot["solutionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "solutionID")
            }
          }

          public var fileId: GraphQLID {
            get {
              return snapshot["fileID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "fileID")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var ownerUser: String {
            get {
              return snapshot["ownerUser"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ownerUser")
            }
          }

          public var file: File? {
            get {
              return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "file")
            }
          }

          public var size: Int? {
            get {
              return snapshot["size"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "size")
            }
          }

          public var preview: String? {
            get {
              return snapshot["preview"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "preview")
            }
          }

          public var version: Int {
            get {
              return snapshot["version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "version")
            }
          }

          public var archived: Bool? {
            get {
              return snapshot["archived"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "archived")
            }
          }

          public var solution: Solution {
            get {
              return Solution(snapshot: snapshot["solution"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "solution")
            }
          }

          public var members: Member? {
            get {
              return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "members")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct File: GraphQLSelectionSet {
            public static let possibleTypes = ["S3ObjectFile"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("bucket", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var bucket: String? {
              get {
                return snapshot["bucket"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "bucket")
              }
            }

            public var region: String? {
              get {
                return snapshot["region"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "region")
              }
            }

            public var key: String? {
              get {
                return snapshot["key"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "key")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct Member: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserVersionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["UserVersion"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .scalar(Role.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, role: Role? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "role": role, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userID")
                }
              }

              public var versionId: GraphQLID {
                get {
                  return snapshot["versionID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "versionID")
                }
              }

              public var role: Role? {
                get {
                  return snapshot["role"] as? Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Tenant: GraphQLSelectionSet {
        public static let possibleTypes = ["Tenant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("address1", type: .nonNull(.scalar(String.self))),
          GraphQLField("address2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("solutions", type: .object(Solution.selections)),
          GraphQLField("users", type: .object(User.selections)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var address1: String {
          get {
            return snapshot["address1"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address1")
          }
        }

        public var address2: String? {
          get {
            return snapshot["address2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "address2")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var postcode: String {
          get {
            return snapshot["postcode"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "postcode")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var solutions: Solution? {
          get {
            return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
          }
        }

        public var users: User? {
          get {
            return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "users")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Solution: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelSolutionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Solution"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("versions", type: .object(Version.selections)),
              GraphQLField("link", type: .scalar(String.self)),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var versions: Version? {
              get {
                return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "versions")
              }
            }

            public var link: String? {
              get {
                return snapshot["link"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "link")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var tenant: Tenant {
              get {
                return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "tenant")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Version: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateVersionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateVersion {\n  onCreateVersion {\n    __typename\n    id\n    solutionID\n    fileID\n    name\n    ownerUser\n    file {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    size\n    preview\n    version\n    archived\n    solution {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    members {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateVersion", type: .object(OnCreateVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateVersion: OnCreateVersion? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateVersion": onCreateVersion.flatMap { $0.snapshot }])
    }

    public var onCreateVersion: OnCreateVersion? {
      get {
        return (snapshot["onCreateVersion"] as? Snapshot).flatMap { OnCreateVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateVersion")
      }
    }

    public struct OnCreateVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["Version"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("file", type: .object(File.selections)),
        GraphQLField("size", type: .scalar(Int.self)),
        GraphQLField("preview", type: .scalar(String.self)),
        GraphQLField("version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("archived", type: .scalar(Bool.self)),
        GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
        GraphQLField("members", type: .object(Member.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var solutionId: GraphQLID {
        get {
          return snapshot["solutionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "solutionID")
        }
      }

      public var fileId: GraphQLID {
        get {
          return snapshot["fileID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "fileID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var file: File? {
        get {
          return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "file")
        }
      }

      public var size: Int? {
        get {
          return snapshot["size"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "size")
        }
      }

      public var preview: String? {
        get {
          return snapshot["preview"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "preview")
        }
      }

      public var version: Int {
        get {
          return snapshot["version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "version")
        }
      }

      public var archived: Bool? {
        get {
          return snapshot["archived"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "archived")
        }
      }

      public var solution: Solution {
        get {
          return Solution(snapshot: snapshot["solution"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "solution")
        }
      }

      public var members: Member? {
        get {
          return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "members")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct File: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Member: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateVersionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateVersion {\n  onUpdateVersion {\n    __typename\n    id\n    solutionID\n    fileID\n    name\n    ownerUser\n    file {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    size\n    preview\n    version\n    archived\n    solution {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    members {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateVersion", type: .object(OnUpdateVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateVersion: OnUpdateVersion? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateVersion": onUpdateVersion.flatMap { $0.snapshot }])
    }

    public var onUpdateVersion: OnUpdateVersion? {
      get {
        return (snapshot["onUpdateVersion"] as? Snapshot).flatMap { OnUpdateVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateVersion")
      }
    }

    public struct OnUpdateVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["Version"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("file", type: .object(File.selections)),
        GraphQLField("size", type: .scalar(Int.self)),
        GraphQLField("preview", type: .scalar(String.self)),
        GraphQLField("version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("archived", type: .scalar(Bool.self)),
        GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
        GraphQLField("members", type: .object(Member.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var solutionId: GraphQLID {
        get {
          return snapshot["solutionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "solutionID")
        }
      }

      public var fileId: GraphQLID {
        get {
          return snapshot["fileID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "fileID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var file: File? {
        get {
          return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "file")
        }
      }

      public var size: Int? {
        get {
          return snapshot["size"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "size")
        }
      }

      public var preview: String? {
        get {
          return snapshot["preview"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "preview")
        }
      }

      public var version: Int {
        get {
          return snapshot["version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "version")
        }
      }

      public var archived: Bool? {
        get {
          return snapshot["archived"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "archived")
        }
      }

      public var solution: Solution {
        get {
          return Solution(snapshot: snapshot["solution"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "solution")
        }
      }

      public var members: Member? {
        get {
          return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "members")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct File: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Member: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteVersionSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteVersion {\n  onDeleteVersion {\n    __typename\n    id\n    solutionID\n    fileID\n    name\n    ownerUser\n    file {\n      __typename\n      id\n      bucket\n      region\n      key\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    size\n    preview\n    version\n    archived\n    solution {\n      __typename\n      id\n      tenantID\n      name\n      versions {\n        __typename\n        items {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        nextToken\n        startedAt\n      }\n      link\n      ownerUser\n      tenant {\n        __typename\n        id\n        name\n        address1\n        address2\n        city\n        postcode\n        bucket\n        solutions {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            tenantID\n            name\n            email\n            solo\n            admin\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          nextToken\n          startedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      _version\n      _deleted\n      _lastChangedAt\n      createdAt\n      updatedAt\n    }\n    members {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        versionID\n        user {\n          __typename\n          id\n          tenantID\n          name\n          email\n          tenant {\n            __typename\n            id\n            name\n            address1\n            address2\n            city\n            postcode\n            bucket\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          solo\n          memberships {\n            __typename\n            nextToken\n            startedAt\n          }\n          admin\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        role\n        versionRecord {\n          __typename\n          id\n          solutionID\n          fileID\n          name\n          ownerUser\n          file {\n            __typename\n            id\n            bucket\n            region\n            key\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          size\n          preview\n          version\n          archived\n          solution {\n            __typename\n            id\n            tenantID\n            name\n            link\n            ownerUser\n            _version\n            _deleted\n            _lastChangedAt\n            createdAt\n            updatedAt\n          }\n          members {\n            __typename\n            nextToken\n            startedAt\n          }\n          _version\n          _deleted\n          _lastChangedAt\n          createdAt\n          updatedAt\n        }\n        _version\n        _deleted\n        _lastChangedAt\n        createdAt\n        updatedAt\n      }\n      nextToken\n      startedAt\n    }\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteVersion", type: .object(OnDeleteVersion.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteVersion: OnDeleteVersion? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteVersion": onDeleteVersion.flatMap { $0.snapshot }])
    }

    public var onDeleteVersion: OnDeleteVersion? {
      get {
        return (snapshot["onDeleteVersion"] as? Snapshot).flatMap { OnDeleteVersion(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteVersion")
      }
    }

    public struct OnDeleteVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["Version"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
        GraphQLField("file", type: .object(File.selections)),
        GraphQLField("size", type: .scalar(Int.self)),
        GraphQLField("preview", type: .scalar(String.self)),
        GraphQLField("version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("archived", type: .scalar(Bool.self)),
        GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
        GraphQLField("members", type: .object(Member.selections)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var solutionId: GraphQLID {
        get {
          return snapshot["solutionID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "solutionID")
        }
      }

      public var fileId: GraphQLID {
        get {
          return snapshot["fileID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "fileID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var ownerUser: String {
        get {
          return snapshot["ownerUser"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ownerUser")
        }
      }

      public var file: File? {
        get {
          return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "file")
        }
      }

      public var size: Int? {
        get {
          return snapshot["size"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "size")
        }
      }

      public var preview: String? {
        get {
          return snapshot["preview"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "preview")
        }
      }

      public var version: Int {
        get {
          return snapshot["version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "version")
        }
      }

      public var archived: Bool? {
        get {
          return snapshot["archived"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "archived")
        }
      }

      public var solution: Solution {
        get {
          return Solution(snapshot: snapshot["solution"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "solution")
        }
      }

      public var members: Member? {
        get {
          return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "members")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct File: GraphQLSelectionSet {
        public static let possibleTypes = ["S3ObjectFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("bucket", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var bucket: String? {
          get {
            return snapshot["bucket"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "bucket")
          }
        }

        public var region: String? {
          get {
            return snapshot["region"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "region")
          }
        }

        public var key: String? {
          get {
            return snapshot["key"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "key")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }

      public struct Solution: GraphQLSelectionSet {
        public static let possibleTypes = ["Solution"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("versions", type: .object(Version.selections)),
          GraphQLField("link", type: .scalar(String.self)),
          GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
          GraphQLField("tenant", type: .nonNull(.object(Tenant.selections))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, tenantId: GraphQLID, name: String, versions: Version? = nil, link: String? = nil, ownerUser: String, tenant: Tenant, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
          self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "versions": versions.flatMap { $0.snapshot }, "link": link, "ownerUser": ownerUser, "tenant": tenant.snapshot, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var tenantId: GraphQLID {
          get {
            return snapshot["tenantID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "tenantID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var versions: Version? {
          get {
            return (snapshot["versions"] as? Snapshot).flatMap { Version(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "versions")
          }
        }

        public var link: String? {
          get {
            return snapshot["link"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var ownerUser: String {
          get {
            return snapshot["ownerUser"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ownerUser")
          }
        }

        public var tenant: Tenant {
          get {
            return Tenant(snapshot: snapshot["tenant"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "tenant")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Version: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelVersionConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }

        public struct Tenant: GraphQLSelectionSet {
          public static let possibleTypes = ["Tenant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("address1", type: .nonNull(.scalar(String.self))),
            GraphQLField("address2", type: .scalar(String.self)),
            GraphQLField("city", type: .nonNull(.scalar(String.self))),
            GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
            GraphQLField("bucket", type: .scalar(String.self)),
            GraphQLField("solutions", type: .object(Solution.selections)),
            GraphQLField("users", type: .object(User.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, solutions: Solution? = nil, users: User? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "solutions": solutions.flatMap { $0.snapshot }, "users": users.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var address1: String {
            get {
              return snapshot["address1"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address1")
            }
          }

          public var address2: String? {
            get {
              return snapshot["address2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "address2")
            }
          }

          public var city: String {
            get {
              return snapshot["city"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "city")
            }
          }

          public var postcode: String {
            get {
              return snapshot["postcode"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "postcode")
            }
          }

          public var bucket: String? {
            get {
              return snapshot["bucket"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "bucket")
            }
          }

          public var solutions: Solution? {
            get {
              return (snapshot["solutions"] as? Snapshot).flatMap { Solution(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "solutions")
            }
          }

          public var users: User? {
            get {
              return (snapshot["users"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "users")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Solution: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelSolutionConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelSolutionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelUserConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("startedAt", type: .scalar(Int.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
              self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var startedAt: Int? {
              get {
                return snapshot["startedAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "startedAt")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("solo", type: .scalar(Bool.self)),
                GraphQLField("admin", type: .scalar(Bool.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, solo: Bool? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "solo": solo, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var solo: Bool? {
                get {
                  return snapshot["solo"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "solo")
                }
              }

              public var admin: Bool? {
                get {
                  return snapshot["admin"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "admin")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }
          }
        }
      }

      public struct Member: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserVersionConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserVersionConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["UserVersion"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("versionID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("role", type: .scalar(Role.self)),
            GraphQLField("versionRecord", type: .object(VersionRecord.selections)),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID, versionId: GraphQLID, user: User? = nil, role: Role? = nil, versionRecord: VersionRecord? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
            self.init(snapshot: ["__typename": "UserVersion", "id": id, "userID": userId, "versionID": versionId, "user": user.flatMap { $0.snapshot }, "role": role, "versionRecord": versionRecord.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var versionId: GraphQLID {
            get {
              return snapshot["versionID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "versionID")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var role: Role? {
            get {
              return snapshot["role"] as? Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var versionRecord: VersionRecord? {
            get {
              return (snapshot["versionRecord"] as? Snapshot).flatMap { VersionRecord(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "versionRecord")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("tenant", type: .object(Tenant.selections)),
              GraphQLField("solo", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
              GraphQLField("admin", type: .scalar(Bool.self)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, tenantId: GraphQLID, name: String, email: String, tenant: Tenant? = nil, solo: Bool? = nil, memberships: Membership? = nil, admin: Bool? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "User", "id": id, "tenantID": tenantId, "name": name, "email": email, "tenant": tenant.flatMap { $0.snapshot }, "solo": solo, "memberships": memberships.flatMap { $0.snapshot }, "admin": admin, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var tenantId: GraphQLID {
              get {
                return snapshot["tenantID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "tenantID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var tenant: Tenant? {
              get {
                return (snapshot["tenant"] as? Snapshot).flatMap { Tenant(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "tenant")
              }
            }

            public var solo: Bool? {
              get {
                return snapshot["solo"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "solo")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public var admin: Bool? {
              get {
                return snapshot["admin"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "admin")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct Tenant: GraphQLSelectionSet {
              public static let possibleTypes = ["Tenant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("address1", type: .nonNull(.scalar(String.self))),
                GraphQLField("address2", type: .scalar(String.self)),
                GraphQLField("city", type: .nonNull(.scalar(String.self))),
                GraphQLField("postcode", type: .nonNull(.scalar(String.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, address1: String, address2: String? = nil, city: String, postcode: String, bucket: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Tenant", "id": id, "name": name, "address1": address1, "address2": address2, "city": city, "postcode": postcode, "bucket": bucket, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var address1: String {
                get {
                  return snapshot["address1"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address1")
                }
              }

              public var address2: String? {
                get {
                  return snapshot["address2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "address2")
                }
              }

              public var city: String {
                get {
                  return snapshot["city"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "city")
                }
              }

              public var postcode: String {
                get {
                  return snapshot["postcode"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "postcode")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }

          public struct VersionRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["Version"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("solutionID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("fileID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
              GraphQLField("file", type: .object(File.selections)),
              GraphQLField("size", type: .scalar(Int.self)),
              GraphQLField("preview", type: .scalar(String.self)),
              GraphQLField("version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("archived", type: .scalar(Bool.self)),
              GraphQLField("solution", type: .nonNull(.object(Solution.selections))),
              GraphQLField("members", type: .object(Member.selections)),
              GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
              GraphQLField("_deleted", type: .scalar(Bool.self)),
              GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, solutionId: GraphQLID, fileId: GraphQLID, name: String, ownerUser: String, file: File? = nil, size: Int? = nil, preview: String? = nil, version: Int, archived: Bool? = nil, solution: Solution, members: Member? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
              self.init(snapshot: ["__typename": "Version", "id": id, "solutionID": solutionId, "fileID": fileId, "name": name, "ownerUser": ownerUser, "file": file.flatMap { $0.snapshot }, "size": size, "preview": preview, "version": version, "archived": archived, "solution": solution.snapshot, "members": members.flatMap { $0.snapshot }, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var solutionId: GraphQLID {
              get {
                return snapshot["solutionID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "solutionID")
              }
            }

            public var fileId: GraphQLID {
              get {
                return snapshot["fileID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "fileID")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var ownerUser: String {
              get {
                return snapshot["ownerUser"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "ownerUser")
              }
            }

            public var file: File? {
              get {
                return (snapshot["file"] as? Snapshot).flatMap { File(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "file")
              }
            }

            public var size: Int? {
              get {
                return snapshot["size"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "size")
              }
            }

            public var preview: String? {
              get {
                return snapshot["preview"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "preview")
              }
            }

            public var version: Int {
              get {
                return snapshot["version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "version")
              }
            }

            public var archived: Bool? {
              get {
                return snapshot["archived"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "archived")
              }
            }

            public var solution: Solution {
              get {
                return Solution(snapshot: snapshot["solution"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "solution")
              }
            }

            public var members: Member? {
              get {
                return (snapshot["members"] as? Snapshot).flatMap { Member(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "members")
              }
            }

            public var version: Int {
              get {
                return snapshot["_version"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_version")
              }
            }

            public var deleted: Bool? {
              get {
                return snapshot["_deleted"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "_deleted")
              }
            }

            public var lastChangedAt: Int {
              get {
                return snapshot["_lastChangedAt"]! as! Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "_lastChangedAt")
              }
            }

            public var createdAt: String {
              get {
                return snapshot["createdAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String {
              get {
                return snapshot["updatedAt"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "updatedAt")
              }
            }

            public struct File: GraphQLSelectionSet {
              public static let possibleTypes = ["S3ObjectFile"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("bucket", type: .scalar(String.self)),
                GraphQLField("region", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var bucket: String? {
                get {
                  return snapshot["bucket"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "bucket")
                }
              }

              public var region: String? {
                get {
                  return snapshot["region"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "region")
                }
              }

              public var key: String? {
                get {
                  return snapshot["key"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "key")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Solution: GraphQLSelectionSet {
              public static let possibleTypes = ["Solution"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("tenantID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("link", type: .scalar(String.self)),
                GraphQLField("ownerUser", type: .nonNull(.scalar(String.self))),
                GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
                GraphQLField("_deleted", type: .scalar(Bool.self)),
                GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
                GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, tenantId: GraphQLID, name: String, link: String? = nil, ownerUser: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
                self.init(snapshot: ["__typename": "Solution", "id": id, "tenantID": tenantId, "name": name, "link": link, "ownerUser": ownerUser, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var tenantId: GraphQLID {
                get {
                  return snapshot["tenantID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "tenantID")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var link: String? {
                get {
                  return snapshot["link"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "link")
                }
              }

              public var ownerUser: String {
                get {
                  return snapshot["ownerUser"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "ownerUser")
                }
              }

              public var version: Int {
                get {
                  return snapshot["_version"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_version")
                }
              }

              public var deleted: Bool? {
                get {
                  return snapshot["_deleted"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_deleted")
                }
              }

              public var lastChangedAt: Int {
                get {
                  return snapshot["_lastChangedAt"]! as! Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "_lastChangedAt")
                }
              }

              public var createdAt: String {
                get {
                  return snapshot["createdAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              public var updatedAt: String {
                get {
                  return snapshot["updatedAt"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "updatedAt")
                }
              }
            }

            public struct Member: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelUserVersionConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("startedAt", type: .scalar(Int.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, startedAt: Int? = nil) {
                self.init(snapshot: ["__typename": "ModelUserVersionConnection", "nextToken": nextToken, "startedAt": startedAt])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var startedAt: Int? {
                get {
                  return snapshot["startedAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "startedAt")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateS3ObjectFileSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateS3ObjectFile {\n  onCreateS3ObjectFile {\n    __typename\n    id\n    bucket\n    region\n    key\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateS3ObjectFile", type: .object(OnCreateS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateS3ObjectFile: OnCreateS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateS3ObjectFile": onCreateS3ObjectFile.flatMap { $0.snapshot }])
    }

    public var onCreateS3ObjectFile: OnCreateS3ObjectFile? {
      get {
        return (snapshot["onCreateS3ObjectFile"] as? Snapshot).flatMap { OnCreateS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateS3ObjectFile")
      }
    }

    public struct OnCreateS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["S3ObjectFile"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("region", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var region: String? {
        get {
          return snapshot["region"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "region")
        }
      }

      public var key: String? {
        get {
          return snapshot["key"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "key")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class OnUpdateS3ObjectFileSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateS3ObjectFile {\n  onUpdateS3ObjectFile {\n    __typename\n    id\n    bucket\n    region\n    key\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateS3ObjectFile", type: .object(OnUpdateS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateS3ObjectFile: OnUpdateS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateS3ObjectFile": onUpdateS3ObjectFile.flatMap { $0.snapshot }])
    }

    public var onUpdateS3ObjectFile: OnUpdateS3ObjectFile? {
      get {
        return (snapshot["onUpdateS3ObjectFile"] as? Snapshot).flatMap { OnUpdateS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateS3ObjectFile")
      }
    }

    public struct OnUpdateS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["S3ObjectFile"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("region", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var region: String? {
        get {
          return snapshot["region"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "region")
        }
      }

      public var key: String? {
        get {
          return snapshot["key"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "key")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class OnDeleteS3ObjectFileSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteS3ObjectFile {\n  onDeleteS3ObjectFile {\n    __typename\n    id\n    bucket\n    region\n    key\n    _version\n    _deleted\n    _lastChangedAt\n    createdAt\n    updatedAt\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteS3ObjectFile", type: .object(OnDeleteS3ObjectFile.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteS3ObjectFile: OnDeleteS3ObjectFile? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteS3ObjectFile": onDeleteS3ObjectFile.flatMap { $0.snapshot }])
    }

    public var onDeleteS3ObjectFile: OnDeleteS3ObjectFile? {
      get {
        return (snapshot["onDeleteS3ObjectFile"] as? Snapshot).flatMap { OnDeleteS3ObjectFile(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteS3ObjectFile")
      }
    }

    public struct OnDeleteS3ObjectFile: GraphQLSelectionSet {
      public static let possibleTypes = ["S3ObjectFile"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("bucket", type: .scalar(String.self)),
        GraphQLField("region", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, bucket: String? = nil, region: String? = nil, key: String? = nil, version: Int, deleted: Bool? = nil, lastChangedAt: Int, createdAt: String, updatedAt: String) {
        self.init(snapshot: ["__typename": "S3ObjectFile", "id": id, "bucket": bucket, "region": region, "key": key, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var bucket: String? {
        get {
          return snapshot["bucket"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "bucket")
        }
      }

      public var region: String? {
        get {
          return snapshot["region"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "region")
        }
      }

      public var key: String? {
        get {
          return snapshot["key"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "key")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}



extension S3Object: AWSS3ObjectProtocol {
  public func getBucketName() -> String {
      return bucket
  }

  public func getKeyName() -> String {
      return key
  }

  public func getRegion() -> String {
      return region
  }
}

extension S3ObjectInput: AWSS3ObjectProtocol, AWSS3InputObjectProtocol {
  public func getLocalSourceFileURL() -> URL? {
      return URL(string: self.localUri)
  }

  public func getMimeType() -> String {
      return self.mimeType
  }

  public func getBucketName() -> String {
      return self.bucket
  }

  public func getKeyName() -> String {
      return self.key
  }

  public func getRegion() -> String {
      return self.region
  }

}

import AWSS3
extension AWSS3PreSignedURLBuilder: AWSS3ObjectPresignedURLGenerator  {
  public func getPresignedURL(s3Object: AWSS3ObjectProtocol) -> URL? {
      let request = AWSS3GetPreSignedURLRequest()
      request.bucket = s3Object.getBucketName()
      request.key = s3Object.getKeyName()
      var url : URL?
      self.getPreSignedURL(request).continueWith { (task) -> Any? in
          url = task.result as URL?
          }.waitUntilFinished()
      return url
  }
}

extension AWSS3TransferUtility: AWSS3ObjectManager {

  public func download(s3Object: AWSS3ObjectProtocol, toURL: URL, completion: @escaping ((Bool, Error?) -> Void)) {

      let completionBlock: AWSS3TransferUtilityDownloadCompletionHandlerBlock = { task, url, data, error  -> Void in
          if let _ = error {
              completion(false, error)
          } else {
              completion(true, nil)
          }
      }
      let _ = self.download(to: toURL, bucket: s3Object.getBucketName(), key: s3Object.getKeyName(), expression: nil, completionHandler: completionBlock)
  }

  public func upload(s3Object: AWSS3ObjectProtocol & AWSS3InputObjectProtocol, completion: @escaping ((_ success: Bool, _ error: Error?) -> Void)) {
      let completionBlock : AWSS3TransferUtilityUploadCompletionHandlerBlock = { task, error  -> Void in
          if let _ = error {
              completion(false, error)
          } else {
              completion(true, nil)
          }
      }
      let _ = self.uploadFile(s3Object.getLocalSourceFileURL()!, bucket: s3Object.getBucketName(), key: s3Object.getKeyName(), contentType: s3Object.getMimeType(), expression: nil, completionHandler: completionBlock).continueWith { (task) -> Any? in
          if let err = task.error {
              completion(false, err)
          }
          return nil
      }
  }
}